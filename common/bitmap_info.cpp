/*
 * This program source code file is part of KiCad, a free EDA CAD application.
 *
 * Copyright (C) 2022 KiCad Developers, see AUTHORS.txt for contributors.
 *
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or (at your
 * option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * This file is auto-generated by CMake when MAINTAIN_PNGS is on. Do not edit by hand!
 */

#include <bitmaps/bitmaps_list.h>
#include <bitmaps/bitmap_info.h>

void BuildBitmapInfo( std::unordered_map<BITMAPS, std::vector<BITMAP_INFO>>& aBitmapInfoCache )
{
    aBitmapInfoCache[BITMAPS::icon_bitmap2component_16].emplace_back( BITMAPS::icon_bitmap2component_16, wxT( "icon_bitmap2component_16_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_eeschema_16].emplace_back( BITMAPS::icon_eeschema_16, wxT( "icon_eeschema_16_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_gerbview_16].emplace_back( BITMAPS::icon_gerbview_16, wxT( "icon_gerbview_16_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_16].emplace_back( BITMAPS::icon_kicad_16, wxT( "icon_kicad_16_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_nightly_16].emplace_back( BITMAPS::icon_kicad_nightly_16, wxT( "icon_kicad_nightly_16_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_libedit_16].emplace_back( BITMAPS::icon_libedit_16, wxT( "icon_libedit_16_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_modedit_16].emplace_back( BITMAPS::icon_modedit_16, wxT( "icon_modedit_16_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor_16].emplace_back( BITMAPS::icon_pagelayout_editor_16, wxT( "icon_pagelayout_editor_16_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbcalculator_16].emplace_back( BITMAPS::icon_pcbcalculator_16, wxT( "icon_pcbcalculator_16_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbnew_16].emplace_back( BITMAPS::icon_pcbnew_16, wxT( "icon_pcbnew_16_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::label_align_left].emplace_back( BITMAPS::label_align_left, wxT( "label_align_left_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::label_align_right].emplace_back( BITMAPS::label_align_right, wxT( "label_align_right_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::label_align_top].emplace_back( BITMAPS::label_align_top, wxT( "label_align_top_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::label_align_bottom].emplace_back( BITMAPS::label_align_bottom, wxT( "label_align_bottom_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::list_nets_16].emplace_back( BITMAPS::list_nets_16, wxT( "list_nets_16_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::options_generic_16].emplace_back( BITMAPS::options_generic_16, wxT( "options_generic_16_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pinorient_right].emplace_back( BITMAPS::pinorient_right, wxT( "pinorient_right_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pinorient_left].emplace_back( BITMAPS::pinorient_left, wxT( "pinorient_left_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pinorient_up].emplace_back( BITMAPS::pinorient_up, wxT( "pinorient_up_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pinorient_down].emplace_back( BITMAPS::pinorient_down, wxT( "pinorient_down_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pinshape_normal].emplace_back( BITMAPS::pinshape_normal, wxT( "pinshape_normal_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pinshape_invert].emplace_back( BITMAPS::pinshape_invert, wxT( "pinshape_invert_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pinshape_clock_normal].emplace_back( BITMAPS::pinshape_clock_normal, wxT( "pinshape_clock_normal_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pinshape_clock_invert].emplace_back( BITMAPS::pinshape_clock_invert, wxT( "pinshape_clock_invert_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pinshape_active_low_input].emplace_back( BITMAPS::pinshape_active_low_input, wxT( "pinshape_active_low_input_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pinshape_clock_active_low].emplace_back( BITMAPS::pinshape_clock_active_low, wxT( "pinshape_clock_active_low_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pinshape_active_low_output].emplace_back( BITMAPS::pinshape_active_low_output, wxT( "pinshape_active_low_output_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pinshape_clock_fall].emplace_back( BITMAPS::pinshape_clock_fall, wxT( "pinshape_clock_fall_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pinshape_nonlogic].emplace_back( BITMAPS::pinshape_nonlogic, wxT( "pinshape_nonlogic_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pintype_input].emplace_back( BITMAPS::pintype_input, wxT( "pintype_input_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pintype_output].emplace_back( BITMAPS::pintype_output, wxT( "pintype_output_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pintype_bidi].emplace_back( BITMAPS::pintype_bidi, wxT( "pintype_bidi_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pintype_3states].emplace_back( BITMAPS::pintype_3states, wxT( "pintype_3states_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pintype_passive].emplace_back( BITMAPS::pintype_passive, wxT( "pintype_passive_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pintype_notspecif].emplace_back( BITMAPS::pintype_notspecif, wxT( "pintype_notspecif_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pintype_powerinput].emplace_back( BITMAPS::pintype_powerinput, wxT( "pintype_powerinput_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pintype_poweroutput].emplace_back( BITMAPS::pintype_poweroutput, wxT( "pintype_poweroutput_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pintype_opencoll].emplace_back( BITMAPS::pintype_opencoll, wxT( "pintype_opencoll_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pintype_openemit].emplace_back( BITMAPS::pintype_openemit, wxT( "pintype_openemit_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pintype_nic].emplace_back( BITMAPS::pintype_nic, wxT( "pintype_nic_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pintype_noconnect].emplace_back( BITMAPS::pintype_noconnect, wxT( "pintype_noconnect_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::small_down].emplace_back( BITMAPS::small_down, wxT( "small_down_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::small_edit].emplace_back( BITMAPS::small_edit, wxT( "small_edit_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::small_folder].emplace_back( BITMAPS::small_folder, wxT( "small_folder_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::small_library].emplace_back( BITMAPS::small_library, wxT( "small_library_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::small_plus].emplace_back( BITMAPS::small_plus, wxT( "small_plus_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::small_refresh].emplace_back( BITMAPS::small_refresh, wxT( "small_refresh_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::small_sort_desc].emplace_back( BITMAPS::small_sort_desc, wxT( "small_sort_desc_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::small_trash].emplace_back( BITMAPS::small_trash, wxT( "small_trash_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::small_up].emplace_back( BITMAPS::small_up, wxT( "small_up_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::small_warning].emplace_back( BITMAPS::small_warning, wxT( "small_warning_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_horizontal].emplace_back( BITMAPS::text_horizontal, wxT( "text_horizontal_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_vertical].emplace_back( BITMAPS::text_vertical, wxT( "text_vertical_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_align_left].emplace_back( BITMAPS::text_align_left, wxT( "text_align_left_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_align_center].emplace_back( BITMAPS::text_align_center, wxT( "text_align_center_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_align_right].emplace_back( BITMAPS::text_align_right, wxT( "text_align_right_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_align_bottom].emplace_back( BITMAPS::text_align_bottom, wxT( "text_align_bottom_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_align_middle].emplace_back( BITMAPS::text_align_middle, wxT( "text_align_middle_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_align_top].emplace_back( BITMAPS::text_align_top, wxT( "text_align_top_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_valign_top].emplace_back( BITMAPS::text_valign_top, wxT( "text_valign_top_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_valign_center].emplace_back( BITMAPS::text_valign_center, wxT( "text_valign_center_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_valign_bottom].emplace_back( BITMAPS::text_valign_bottom, wxT( "text_valign_bottom_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_bold].emplace_back( BITMAPS::text_bold, wxT( "text_bold_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_italic].emplace_back( BITMAPS::text_italic, wxT( "text_italic_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_mirrored].emplace_back( BITMAPS::text_mirrored, wxT( "text_mirrored_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::tree_nosel].emplace_back( BITMAPS::tree_nosel, wxT( "tree_nosel_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::tree_sel].emplace_back( BITMAPS::tree_sel, wxT( "tree_sel_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::visibility].emplace_back( BITMAPS::visibility, wxT( "visibility_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::visibility_off].emplace_back( BITMAPS::visibility_off, wxT( "visibility_off_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::www].emplace_back( BITMAPS::www, wxT( "www_16.png" ), 16, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_bitmap2component_16].emplace_back( BITMAPS::icon_bitmap2component_16, wxT( "icon_bitmap2component_16_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_eeschema_16].emplace_back( BITMAPS::icon_eeschema_16, wxT( "icon_eeschema_16_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_gerbview_16].emplace_back( BITMAPS::icon_gerbview_16, wxT( "icon_gerbview_16_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_16].emplace_back( BITMAPS::icon_kicad_16, wxT( "icon_kicad_16_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_nightly_16].emplace_back( BITMAPS::icon_kicad_nightly_16, wxT( "icon_kicad_nightly_16_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_libedit_16].emplace_back( BITMAPS::icon_libedit_16, wxT( "icon_libedit_16_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_modedit_16].emplace_back( BITMAPS::icon_modedit_16, wxT( "icon_modedit_16_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor_16].emplace_back( BITMAPS::icon_pagelayout_editor_16, wxT( "icon_pagelayout_editor_16_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbcalculator_16].emplace_back( BITMAPS::icon_pcbcalculator_16, wxT( "icon_pcbcalculator_16_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbnew_16].emplace_back( BITMAPS::icon_pcbnew_16, wxT( "icon_pcbnew_16_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::label_align_left].emplace_back( BITMAPS::label_align_left, wxT( "label_align_left_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::label_align_right].emplace_back( BITMAPS::label_align_right, wxT( "label_align_right_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::label_align_top].emplace_back( BITMAPS::label_align_top, wxT( "label_align_top_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::label_align_bottom].emplace_back( BITMAPS::label_align_bottom, wxT( "label_align_bottom_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::list_nets_16].emplace_back( BITMAPS::list_nets_16, wxT( "list_nets_16_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::options_generic_16].emplace_back( BITMAPS::options_generic_16, wxT( "options_generic_16_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pinorient_right].emplace_back( BITMAPS::pinorient_right, wxT( "pinorient_right_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pinorient_left].emplace_back( BITMAPS::pinorient_left, wxT( "pinorient_left_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pinorient_up].emplace_back( BITMAPS::pinorient_up, wxT( "pinorient_up_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pinorient_down].emplace_back( BITMAPS::pinorient_down, wxT( "pinorient_down_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pinshape_normal].emplace_back( BITMAPS::pinshape_normal, wxT( "pinshape_normal_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pinshape_invert].emplace_back( BITMAPS::pinshape_invert, wxT( "pinshape_invert_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pinshape_clock_normal].emplace_back( BITMAPS::pinshape_clock_normal, wxT( "pinshape_clock_normal_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pinshape_clock_invert].emplace_back( BITMAPS::pinshape_clock_invert, wxT( "pinshape_clock_invert_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pinshape_active_low_input].emplace_back( BITMAPS::pinshape_active_low_input, wxT( "pinshape_active_low_input_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pinshape_clock_active_low].emplace_back( BITMAPS::pinshape_clock_active_low, wxT( "pinshape_clock_active_low_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pinshape_active_low_output].emplace_back( BITMAPS::pinshape_active_low_output, wxT( "pinshape_active_low_output_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pinshape_clock_fall].emplace_back( BITMAPS::pinshape_clock_fall, wxT( "pinshape_clock_fall_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pinshape_nonlogic].emplace_back( BITMAPS::pinshape_nonlogic, wxT( "pinshape_nonlogic_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pintype_input].emplace_back( BITMAPS::pintype_input, wxT( "pintype_input_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pintype_output].emplace_back( BITMAPS::pintype_output, wxT( "pintype_output_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pintype_bidi].emplace_back( BITMAPS::pintype_bidi, wxT( "pintype_bidi_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pintype_3states].emplace_back( BITMAPS::pintype_3states, wxT( "pintype_3states_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pintype_passive].emplace_back( BITMAPS::pintype_passive, wxT( "pintype_passive_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pintype_notspecif].emplace_back( BITMAPS::pintype_notspecif, wxT( "pintype_notspecif_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pintype_powerinput].emplace_back( BITMAPS::pintype_powerinput, wxT( "pintype_powerinput_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pintype_poweroutput].emplace_back( BITMAPS::pintype_poweroutput, wxT( "pintype_poweroutput_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pintype_opencoll].emplace_back( BITMAPS::pintype_opencoll, wxT( "pintype_opencoll_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pintype_openemit].emplace_back( BITMAPS::pintype_openemit, wxT( "pintype_openemit_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pintype_nic].emplace_back( BITMAPS::pintype_nic, wxT( "pintype_nic_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pintype_noconnect].emplace_back( BITMAPS::pintype_noconnect, wxT( "pintype_noconnect_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::small_down].emplace_back( BITMAPS::small_down, wxT( "small_down_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::small_edit].emplace_back( BITMAPS::small_edit, wxT( "small_edit_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::small_folder].emplace_back( BITMAPS::small_folder, wxT( "small_folder_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::small_library].emplace_back( BITMAPS::small_library, wxT( "small_library_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::small_plus].emplace_back( BITMAPS::small_plus, wxT( "small_plus_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::small_refresh].emplace_back( BITMAPS::small_refresh, wxT( "small_refresh_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::small_sort_desc].emplace_back( BITMAPS::small_sort_desc, wxT( "small_sort_desc_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::small_trash].emplace_back( BITMAPS::small_trash, wxT( "small_trash_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::small_up].emplace_back( BITMAPS::small_up, wxT( "small_up_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::small_warning].emplace_back( BITMAPS::small_warning, wxT( "small_warning_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_horizontal].emplace_back( BITMAPS::text_horizontal, wxT( "text_horizontal_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_vertical].emplace_back( BITMAPS::text_vertical, wxT( "text_vertical_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_align_left].emplace_back( BITMAPS::text_align_left, wxT( "text_align_left_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_align_center].emplace_back( BITMAPS::text_align_center, wxT( "text_align_center_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_align_right].emplace_back( BITMAPS::text_align_right, wxT( "text_align_right_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_align_bottom].emplace_back( BITMAPS::text_align_bottom, wxT( "text_align_bottom_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_align_middle].emplace_back( BITMAPS::text_align_middle, wxT( "text_align_middle_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_align_top].emplace_back( BITMAPS::text_align_top, wxT( "text_align_top_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_valign_top].emplace_back( BITMAPS::text_valign_top, wxT( "text_valign_top_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_valign_center].emplace_back( BITMAPS::text_valign_center, wxT( "text_valign_center_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_valign_bottom].emplace_back( BITMAPS::text_valign_bottom, wxT( "text_valign_bottom_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_bold].emplace_back( BITMAPS::text_bold, wxT( "text_bold_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_italic].emplace_back( BITMAPS::text_italic, wxT( "text_italic_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_mirrored].emplace_back( BITMAPS::text_mirrored, wxT( "text_mirrored_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::tree_nosel].emplace_back( BITMAPS::tree_nosel, wxT( "tree_nosel_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::tree_sel].emplace_back( BITMAPS::tree_sel, wxT( "tree_sel_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::visibility].emplace_back( BITMAPS::visibility, wxT( "visibility_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::visibility_off].emplace_back( BITMAPS::visibility_off, wxT( "visibility_off_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::www].emplace_back( BITMAPS::www, wxT( "www_dark_16.png" ), 16, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::about].emplace_back( BITMAPS::about, wxT( "about_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_aligned_dimension].emplace_back( BITMAPS::add_aligned_dimension, wxT( "add_aligned_dimension_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_arc].emplace_back( BITMAPS::add_arc, wxT( "add_arc_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_board].emplace_back( BITMAPS::add_board, wxT( "add_board_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_bus2bus].emplace_back( BITMAPS::add_bus2bus, wxT( "add_bus2bus_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_bus].emplace_back( BITMAPS::add_bus, wxT( "add_bus_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_center_dimension].emplace_back( BITMAPS::add_center_dimension, wxT( "add_center_dimension_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_class_flag].emplace_back( BITMAPS::add_class_flag, wxT( "add_class_flag_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_circle].emplace_back( BITMAPS::add_circle, wxT( "add_circle_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_component].emplace_back( BITMAPS::add_component, wxT( "add_component_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_corner].emplace_back( BITMAPS::add_corner, wxT( "add_corner_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_dashed_line].emplace_back( BITMAPS::add_dashed_line, wxT( "add_dashed_line_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_document].emplace_back( BITMAPS::add_document, wxT( "add_document_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_glabel].emplace_back( BITMAPS::add_glabel, wxT( "add_glabel_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_graphical_segments].emplace_back( BITMAPS::add_graphical_segments, wxT( "add_graphical_segments_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_graphical_polygon].emplace_back( BITMAPS::add_graphical_polygon, wxT( "add_graphical_polygon_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_hierarchical_label].emplace_back( BITMAPS::add_hierarchical_label, wxT( "add_hierarchical_label_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_hierar_pin].emplace_back( BITMAPS::add_hierar_pin, wxT( "add_hierar_pin_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_hierarchical_subsheet].emplace_back( BITMAPS::add_hierarchical_subsheet, wxT( "add_hierarchical_subsheet_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_junction].emplace_back( BITMAPS::add_junction, wxT( "add_junction_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_keepout_area].emplace_back( BITMAPS::add_keepout_area, wxT( "add_keepout_area_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_label].emplace_back( BITMAPS::add_label, wxT( "add_label_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_leader].emplace_back( BITMAPS::add_leader, wxT( "add_leader_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_library].emplace_back( BITMAPS::add_library, wxT( "add_library_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_line2bus].emplace_back( BITMAPS::add_line2bus, wxT( "add_line2bus_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_line_label].emplace_back( BITMAPS::add_line_label, wxT( "add_line_label_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_line].emplace_back( BITMAPS::add_line, wxT( "add_line_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_orthogonal_dimension].emplace_back( BITMAPS::add_orthogonal_dimension, wxT( "add_orthogonal_dimension_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_pcb_target].emplace_back( BITMAPS::add_pcb_target, wxT( "add_pcb_target_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_power].emplace_back( BITMAPS::add_power, wxT( "add_power_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_radial_dimension].emplace_back( BITMAPS::add_radial_dimension, wxT( "add_radial_dimension_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_rectangle].emplace_back( BITMAPS::add_rectangle, wxT( "add_rectangle_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_symbol_to_schematic].emplace_back( BITMAPS::add_symbol_to_schematic, wxT( "add_symbol_to_schematic_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_textbox].emplace_back( BITMAPS::add_textbox, wxT( "add_textbox_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_tracks].emplace_back( BITMAPS::add_tracks, wxT( "add_tracks_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_via].emplace_back( BITMAPS::add_via, wxT( "add_via_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_zone_cutout].emplace_back( BITMAPS::add_zone_cutout, wxT( "add_zone_cutout_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::add_zone].emplace_back( BITMAPS::add_zone, wxT( "add_zone_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items].emplace_back( BITMAPS::align_items, wxT( "align_items_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items_left].emplace_back( BITMAPS::align_items_left, wxT( "align_items_left_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items_right].emplace_back( BITMAPS::align_items_right, wxT( "align_items_right_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items_top].emplace_back( BITMAPS::align_items_top, wxT( "align_items_top_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items_bottom].emplace_back( BITMAPS::align_items_bottom, wxT( "align_items_bottom_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items_center].emplace_back( BITMAPS::align_items_center, wxT( "align_items_center_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::align_items_middle].emplace_back( BITMAPS::align_items_middle, wxT( "align_items_middle_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::anchor].emplace_back( BITMAPS::anchor, wxT( "anchor_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::annotate_down_right].emplace_back( BITMAPS::annotate_down_right, wxT( "annotate_down_right_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::annotate_right_down].emplace_back( BITMAPS::annotate_right_down, wxT( "annotate_right_down_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::annotate].emplace_back( BITMAPS::annotate, wxT( "annotate_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::apply_pad_settings].emplace_back( BITMAPS::apply_pad_settings, wxT( "apply_pad_settings_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::array].emplace_back( BITMAPS::array, wxT( "array_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::auto_associate].emplace_back( BITMAPS::auto_associate, wxT( "auto_associate_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::auto_track_width].emplace_back( BITMAPS::auto_track_width, wxT( "auto_track_width_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::autoplace_fields].emplace_back( BITMAPS::autoplace_fields, wxT( "autoplace_fields_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d_back].emplace_back( BITMAPS::axis3d_back, wxT( "axis3d_back_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d_bottom].emplace_back( BITMAPS::axis3d_bottom, wxT( "axis3d_bottom_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d_front].emplace_back( BITMAPS::axis3d_front, wxT( "axis3d_front_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d_left].emplace_back( BITMAPS::axis3d_left, wxT( "axis3d_left_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d_right].emplace_back( BITMAPS::axis3d_right, wxT( "axis3d_right_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d_top].emplace_back( BITMAPS::axis3d_top, wxT( "axis3d_top_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::axis3d].emplace_back( BITMAPS::axis3d, wxT( "axis3d_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::break_line].emplace_back( BITMAPS::break_line, wxT( "break_line_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::bug].emplace_back( BITMAPS::bug, wxT( "bug_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::bus_definition_tool].emplace_back( BITMAPS::bus_definition_tool, wxT( "bus_definition_tool_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::cancel].emplace_back( BITMAPS::cancel, wxT( "cancel_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::change_entry_orient].emplace_back( BITMAPS::change_entry_orient, wxT( "change_entry_orient_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::contrast_mode].emplace_back( BITMAPS::contrast_mode, wxT( "contrast_mode_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::curved_ratsnest].emplace_back( BITMAPS::curved_ratsnest, wxT( "curved_ratsnest_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::checked_ok].emplace_back( BITMAPS::checked_ok, wxT( "checked_ok_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::color_materials].emplace_back( BITMAPS::color_materials, wxT( "color_materials_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::component_select_unit].emplace_back( BITMAPS::component_select_unit, wxT( "component_select_unit_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::config].emplace_back( BITMAPS::config, wxT( "config_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::convert].emplace_back( BITMAPS::convert, wxT( "convert_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::copy].emplace_back( BITMAPS::copy, wxT( "copy_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::copy_pad_settings].emplace_back( BITMAPS::copy_pad_settings, wxT( "copy_pad_settings_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::cursor_shape].emplace_back( BITMAPS::cursor_shape, wxT( "cursor_shape_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::cursor].emplace_back( BITMAPS::cursor, wxT( "cursor_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::custom_pad_to_primitives].emplace_back( BITMAPS::custom_pad_to_primitives, wxT( "custom_pad_to_primitives_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::cut].emplace_back( BITMAPS::cut, wxT( "cut_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::datasheet].emplace_back( BITMAPS::datasheet, wxT( "datasheet_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::delete_association].emplace_back( BITMAPS::delete_association, wxT( "delete_association_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::delete_cursor].emplace_back( BITMAPS::delete_cursor, wxT( "delete_cursor_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::delete_gerber].emplace_back( BITMAPS::delete_gerber, wxT( "delete_gerber_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::delete_sheet].emplace_back( BITMAPS::delete_sheet, wxT( "delete_sheet_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::directory].emplace_back( BITMAPS::directory, wxT( "directory_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::directory_browser].emplace_back( BITMAPS::directory_browser, wxT( "directory_browser_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::directory_open].emplace_back( BITMAPS::directory_open, wxT( "directory_open_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::distribute_horizontal].emplace_back( BITMAPS::distribute_horizontal, wxT( "distribute_horizontal_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::distribute_vertical].emplace_back( BITMAPS::distribute_vertical, wxT( "distribute_vertical_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::down].emplace_back( BITMAPS::down, wxT( "down_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::drag].emplace_back( BITMAPS::drag, wxT( "drag_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::drag_segment_withslope].emplace_back( BITMAPS::drag_segment_withslope, wxT( "drag_segment_withslope_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::drc].emplace_back( BITMAPS::drc, wxT( "drc_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::duplicate].emplace_back( BITMAPS::duplicate, wxT( "duplicate_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::edit_comp_footprint].emplace_back( BITMAPS::edit_comp_footprint, wxT( "edit_comp_footprint_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::edit_comp_ref].emplace_back( BITMAPS::edit_comp_ref, wxT( "edit_comp_ref_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::edit_comp_value].emplace_back( BITMAPS::edit_comp_value, wxT( "edit_comp_value_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::editor].emplace_back( BITMAPS::editor, wxT( "editor_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::edit_cmp_symb_links].emplace_back( BITMAPS::edit_cmp_symb_links, wxT( "edit_cmp_symb_links_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::edit].emplace_back( BITMAPS::edit, wxT( "edit_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::edge_to_copper_clearance].emplace_back( BITMAPS::edge_to_copper_clearance, wxT( "edge_to_copper_clearance_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::enter_sheet].emplace_back( BITMAPS::enter_sheet, wxT( "enter_sheet_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ercerr].emplace_back( BITMAPS::ercerr, wxT( "ercerr_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::erc_green].emplace_back( BITMAPS::erc_green, wxT( "erc_green_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ercwarn].emplace_back( BITMAPS::ercwarn, wxT( "ercwarn_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::erc].emplace_back( BITMAPS::erc, wxT( "erc_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::exit].emplace_back( BITMAPS::exit, wxT( "exit_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::exchange].emplace_back( BITMAPS::exchange, wxT( "exchange_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export3d].emplace_back( BITMAPS::export3d, wxT( "export3d_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_cmp].emplace_back( BITMAPS::export_cmp, wxT( "export_cmp_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_dsn].emplace_back( BITMAPS::export_dsn, wxT( "export_dsn_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_idf].emplace_back( BITMAPS::export_idf, wxT( "export_idf_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_file].emplace_back( BITMAPS::export_file, wxT( "export_file_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_footprint_names].emplace_back( BITMAPS::export_footprint_names, wxT( "export_footprint_names_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_module].emplace_back( BITMAPS::export_module, wxT( "export_module_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_part].emplace_back( BITMAPS::export_part, wxT( "export_part_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_png].emplace_back( BITMAPS::export_png, wxT( "export_png_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_step].emplace_back( BITMAPS::export_step, wxT( "export_step_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_svg].emplace_back( BITMAPS::export_svg, wxT( "export_svg_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::export_to_pcbnew].emplace_back( BITMAPS::export_to_pcbnew, wxT( "export_to_pcbnew_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::fabrication].emplace_back( BITMAPS::fabrication, wxT( "fabrication_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_bom].emplace_back( BITMAPS::file_bom, wxT( "file_bom_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_drl].emplace_back( BITMAPS::file_drl, wxT( "file_drl_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_dsn].emplace_back( BITMAPS::file_dsn, wxT( "file_dsn_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_gbr].emplace_back( BITMAPS::file_gbr, wxT( "file_gbr_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_gerber_job].emplace_back( BITMAPS::file_gerber_job, wxT( "file_gerber_job_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_html].emplace_back( BITMAPS::file_html, wxT( "file_html_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_idf].emplace_back( BITMAPS::file_idf, wxT( "file_idf_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_pdf].emplace_back( BITMAPS::file_pdf, wxT( "file_pdf_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_pos].emplace_back( BITMAPS::file_pos, wxT( "file_pos_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::file_svg].emplace_back( BITMAPS::file_svg, wxT( "file_svg_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::fill_zone].emplace_back( BITMAPS::fill_zone, wxT( "fill_zone_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::filter].emplace_back( BITMAPS::filter, wxT( "filter_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::find].emplace_back( BITMAPS::find, wxT( "find_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::find_replace].emplace_back( BITMAPS::find_replace, wxT( "find_replace_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::flag].emplace_back( BITMAPS::flag, wxT( "flag_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::flip_board].emplace_back( BITMAPS::flip_board, wxT( "flip_board_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::gbr_select_mode1].emplace_back( BITMAPS::gbr_select_mode1, wxT( "gbr_select_mode1_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::gbr_select_mode2].emplace_back( BITMAPS::gbr_select_mode2, wxT( "gbr_select_mode2_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::gerbview_show_negative_objects].emplace_back( BITMAPS::gerbview_show_negative_objects, wxT( "gerbview_show_negative_objects_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::general_deletions].emplace_back( BITMAPS::general_deletions, wxT( "general_deletions_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::general_ratsnest].emplace_back( BITMAPS::general_ratsnest, wxT( "general_ratsnest_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::grid_select].emplace_back( BITMAPS::grid_select, wxT( "grid_select_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::grid_select_axis].emplace_back( BITMAPS::grid_select_axis, wxT( "grid_select_axis_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::grid].emplace_back( BITMAPS::grid, wxT( "grid_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::group].emplace_back( BITMAPS::group, wxT( "group_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::group_enter].emplace_back( BITMAPS::group_enter, wxT( "group_enter_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::group_leave].emplace_back( BITMAPS::group_leave, wxT( "group_leave_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::group_remove].emplace_back( BITMAPS::group_remove, wxT( "group_remove_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::group_ungroup].emplace_back( BITMAPS::group_ungroup, wxT( "group_ungroup_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::help].emplace_back( BITMAPS::help, wxT( "help_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::help_online].emplace_back( BITMAPS::help_online, wxT( "help_online_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hidden_pin].emplace_back( BITMAPS::hidden_pin, wxT( "hidden_pin_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hide_ratsnest].emplace_back( BITMAPS::hide_ratsnest, wxT( "hide_ratsnest_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hierarchy_nav].emplace_back( BITMAPS::hierarchy_nav, wxT( "hierarchy_nav_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hotkeys].emplace_back( BITMAPS::hotkeys, wxT( "hotkeys_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hole_to_hole_clearance].emplace_back( BITMAPS::hole_to_hole_clearance, wxT( "hole_to_hole_clearance_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hole_to_copper_clearance].emplace_back( BITMAPS::hole_to_copper_clearance, wxT( "hole_to_copper_clearance_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::hv45mode].emplace_back( BITMAPS::hv45mode, wxT( "hv45mode_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_cvpcb_24].emplace_back( BITMAPS::icon_cvpcb_24, wxT( "icon_cvpcb_24_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_footprint_browser].emplace_back( BITMAPS::icon_footprint_browser, wxT( "icon_footprint_browser_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_gerbview_24].emplace_back( BITMAPS::icon_gerbview_24, wxT( "icon_gerbview_24_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcm_24].emplace_back( BITMAPS::icon_pcm_24, wxT( "icon_pcm_24_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import3d].emplace_back( BITMAPS::import3d, wxT( "import3d_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::image].emplace_back( BITMAPS::image, wxT( "image_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_brd_file].emplace_back( BITMAPS::import_brd_file, wxT( "import_brd_file_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_document].emplace_back( BITMAPS::import_document, wxT( "import_document_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_footprint_names].emplace_back( BITMAPS::import_footprint_names, wxT( "import_footprint_names_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_hierarchical_label].emplace_back( BITMAPS::import_hierarchical_label, wxT( "import_hierarchical_label_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_module].emplace_back( BITMAPS::import_module, wxT( "import_module_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_part].emplace_back( BITMAPS::import_part, wxT( "import_part_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_project].emplace_back( BITMAPS::import_project, wxT( "import_project_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import_vector].emplace_back( BITMAPS::import_vector, wxT( "import_vector_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::import].emplace_back( BITMAPS::import, wxT( "import_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::info].emplace_back( BITMAPS::info, wxT( "info_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::insert_module_board].emplace_back( BITMAPS::insert_module_board, wxT( "insert_module_board_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::language].emplace_back( BITMAPS::language, wxT( "language_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::layers_manager].emplace_back( BITMAPS::layers_manager, wxT( "layers_manager_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::leave_sheet].emplace_back( BITMAPS::leave_sheet, wxT( "leave_sheet_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::left].emplace_back( BITMAPS::left, wxT( "left_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::libedit].emplace_back( BITMAPS::libedit, wxT( "libedit_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::lib_next].emplace_back( BITMAPS::lib_next, wxT( "lib_next_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::lib_previous].emplace_back( BITMAPS::lib_previous, wxT( "lib_previous_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::library_browser].emplace_back( BITMAPS::library_browser, wxT( "library_browser_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::library_archive].emplace_back( BITMAPS::library_archive, wxT( "library_archive_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::library_archive_as].emplace_back( BITMAPS::library_archive_as, wxT( "library_archive_as_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::library].emplace_back( BITMAPS::library, wxT( "library_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::library_table].emplace_back( BITMAPS::library_table, wxT( "library_table_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::lines_any].emplace_back( BITMAPS::lines_any, wxT( "lines_any_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::lines90].emplace_back( BITMAPS::lines90, wxT( "lines90_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::list_nets].emplace_back( BITMAPS::list_nets, wxT( "list_nets_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::load_drill].emplace_back( BITMAPS::load_drill, wxT( "load_drill_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::load_gerber].emplace_back( BITMAPS::load_gerber, wxT( "load_gerber_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::load_module_board].emplace_back( BITMAPS::load_module_board, wxT( "load_module_board_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::lock_unlock].emplace_back( BITMAPS::lock_unlock, wxT( "lock_unlock_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::locked].emplace_back( BITMAPS::locked, wxT( "locked_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::marker_exclude].emplace_back( BITMAPS::marker_exclude, wxT( "marker_exclude_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::marker_next].emplace_back( BITMAPS::marker_next, wxT( "marker_next_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::marker_previous].emplace_back( BITMAPS::marker_previous, wxT( "marker_previous_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::measurement].emplace_back( BITMAPS::measurement, wxT( "measurement_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pcb_target].emplace_back( BITMAPS::pcb_target, wxT( "pcb_target_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mirror_h].emplace_back( BITMAPS::mirror_h, wxT( "mirror_h_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mirror_v].emplace_back( BITMAPS::mirror_v, wxT( "mirror_v_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mode_module].emplace_back( BITMAPS::mode_module, wxT( "mode_module_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module_editor].emplace_back( BITMAPS::module_editor, wxT( "module_editor_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module_wizard].emplace_back( BITMAPS::module_wizard, wxT( "module_wizard_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module_filtered_list].emplace_back( BITMAPS::module_filtered_list, wxT( "module_filtered_list_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module_options].emplace_back( BITMAPS::module_options, wxT( "module_options_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module_pin_filtered_list].emplace_back( BITMAPS::module_pin_filtered_list, wxT( "module_pin_filtered_list_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module_library_list].emplace_back( BITMAPS::module_library_list, wxT( "module_library_list_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::module].emplace_back( BITMAPS::module, wxT( "module_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::morgan1].emplace_back( BITMAPS::morgan1, wxT( "morgan1_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::morgan2].emplace_back( BITMAPS::morgan2, wxT( "morgan2_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::move_exactly].emplace_back( BITMAPS::move_exactly, wxT( "move_exactly_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::move].emplace_back( BITMAPS::move, wxT( "move_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::move_relative].emplace_back( BITMAPS::move_relative, wxT( "move_relative_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mw_add_gap].emplace_back( BITMAPS::mw_add_gap, wxT( "mw_add_gap_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mw_add_line].emplace_back( BITMAPS::mw_add_line, wxT( "mw_add_line_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mw_add_shape].emplace_back( BITMAPS::mw_add_shape, wxT( "mw_add_shape_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mw_add_stub_arc].emplace_back( BITMAPS::mw_add_stub_arc, wxT( "mw_add_stub_arc_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::mw_add_stub].emplace_back( BITMAPS::mw_add_stub, wxT( "mw_add_stub_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::net_highlight].emplace_back( BITMAPS::net_highlight, wxT( "net_highlight_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::net_highlight_schematic].emplace_back( BITMAPS::net_highlight_schematic, wxT( "net_highlight_schematic_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::netlist].emplace_back( BITMAPS::netlist, wxT( "netlist_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::new_component].emplace_back( BITMAPS::new_component, wxT( "new_component_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::new_footprint].emplace_back( BITMAPS::new_footprint, wxT( "new_footprint_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::new_generic].emplace_back( BITMAPS::new_generic, wxT( "new_generic_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::new_library].emplace_back( BITMAPS::new_library, wxT( "new_library_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::new_project].emplace_back( BITMAPS::new_project, wxT( "new_project_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::new_project_from_template].emplace_back( BITMAPS::new_project_from_template, wxT( "new_project_from_template_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::noconn].emplace_back( BITMAPS::noconn, wxT( "noconn_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::normal].emplace_back( BITMAPS::normal, wxT( "normal_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::open_project].emplace_back( BITMAPS::open_project, wxT( "open_project_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::open_project_demo].emplace_back( BITMAPS::open_project_demo, wxT( "open_project_demo_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::options_3drender].emplace_back( BITMAPS::options_3drender, wxT( "options_3drender_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::options_board].emplace_back( BITMAPS::options_board, wxT( "options_board_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::options_generic].emplace_back( BITMAPS::options_generic, wxT( "options_generic_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::options_pad].emplace_back( BITMAPS::options_pad, wxT( "options_pad_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::options_schematic].emplace_back( BITMAPS::options_schematic, wxT( "options_schematic_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::opt_show_polygon].emplace_back( BITMAPS::opt_show_polygon, wxT( "opt_show_polygon_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ortho].emplace_back( BITMAPS::ortho, wxT( "ortho_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pack_footprints].emplace_back( BITMAPS::pack_footprints, wxT( "pack_footprints_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pad_sketch].emplace_back( BITMAPS::pad_sketch, wxT( "pad_sketch_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pad].emplace_back( BITMAPS::pad, wxT( "pad_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pad_enumerate].emplace_back( BITMAPS::pad_enumerate, wxT( "pad_enumerate_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pad_number].emplace_back( BITMAPS::pad_number, wxT( "pad_number_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pads_mask_layers].emplace_back( BITMAPS::pads_mask_layers, wxT( "pads_mask_layers_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pads_remove].emplace_back( BITMAPS::pads_remove, wxT( "pads_remove_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::path].emplace_back( BITMAPS::path, wxT( "path_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pagelayout_normal_view_mode].emplace_back( BITMAPS::pagelayout_normal_view_mode, wxT( "pagelayout_normal_view_mode_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pagelayout_special_view_mode].emplace_back( BITMAPS::pagelayout_special_view_mode, wxT( "pagelayout_special_view_mode_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::part_properties].emplace_back( BITMAPS::part_properties, wxT( "part_properties_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::paste].emplace_back( BITMAPS::paste, wxT( "paste_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::paste_special].emplace_back( BITMAPS::paste_special, wxT( "paste_special_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pin2pin].emplace_back( BITMAPS::pin2pin, wxT( "pin2pin_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pin_size_to].emplace_back( BITMAPS::pin_size_to, wxT( "pin_size_to_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pin_show_etype].emplace_back( BITMAPS::pin_show_etype, wxT( "pin_show_etype_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pin_table].emplace_back( BITMAPS::pin_table, wxT( "pin_table_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pin].emplace_back( BITMAPS::pin, wxT( "pin_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::plot].emplace_back( BITMAPS::plot, wxT( "plot_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::polar_coord].emplace_back( BITMAPS::polar_coord, wxT( "polar_coord_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_bom].emplace_back( BITMAPS::post_bom, wxT( "post_bom_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_compo].emplace_back( BITMAPS::post_compo, wxT( "post_compo_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_d356].emplace_back( BITMAPS::post_d356, wxT( "post_d356_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_drill].emplace_back( BITMAPS::post_drill, wxT( "post_drill_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_gencad].emplace_back( BITMAPS::post_gencad, wxT( "post_gencad_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_gerber].emplace_back( BITMAPS::post_gerber, wxT( "post_gerber_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::post_rpt].emplace_back( BITMAPS::post_rpt, wxT( "post_rpt_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::preference].emplace_back( BITMAPS::preference, wxT( "preference_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::print_button].emplace_back( BITMAPS::print_button, wxT( "print_button_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::project].emplace_back( BITMAPS::project, wxT( "project_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::project_close].emplace_back( BITMAPS::project_close, wxT( "project_close_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::project_kicad].emplace_back( BITMAPS::project_kicad, wxT( "project_kicad_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair].emplace_back( BITMAPS::ps_diff_pair, wxT( "ps_diff_pair_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair_gap].emplace_back( BITMAPS::ps_diff_pair_gap, wxT( "ps_diff_pair_gap_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair_tune_length].emplace_back( BITMAPS::ps_diff_pair_tune_length, wxT( "ps_diff_pair_tune_length_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair_tune_phase].emplace_back( BITMAPS::ps_diff_pair_tune_phase, wxT( "ps_diff_pair_tune_phase_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::ps_tune_length].emplace_back( BITMAPS::ps_tune_length, wxT( "ps_tune_length_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::push_pad_settings].emplace_back( BITMAPS::push_pad_settings, wxT( "push_pad_settings_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::puzzle_piece].emplace_back( BITMAPS::puzzle_piece, wxT( "puzzle_piece_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::py_script].emplace_back( BITMAPS::py_script, wxT( "py_script_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::recent].emplace_back( BITMAPS::recent, wxT( "recent_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::redo].emplace_back( BITMAPS::redo, wxT( "redo_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::refresh].emplace_back( BITMAPS::refresh, wxT( "refresh_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::reload].emplace_back( BITMAPS::reload, wxT( "reload_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::render_mode].emplace_back( BITMAPS::render_mode, wxT( "render_mode_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rescue].emplace_back( BITMAPS::rescue, wxT( "rescue_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::right].emplace_back( BITMAPS::right, wxT( "right_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner].emplace_back( BITMAPS::router_len_tuner, wxT( "router_len_tuner_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_setup].emplace_back( BITMAPS::router_len_tuner_setup, wxT( "router_len_tuner_setup_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_amplitude_decr].emplace_back( BITMAPS::router_len_tuner_amplitude_decr, wxT( "router_len_tuner_amplitude_decr_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_amplitude_incr].emplace_back( BITMAPS::router_len_tuner_amplitude_incr, wxT( "router_len_tuner_amplitude_incr_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_dist_decr].emplace_back( BITMAPS::router_len_tuner_dist_decr, wxT( "router_len_tuner_dist_decr_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_dist_incr].emplace_back( BITMAPS::router_len_tuner_dist_incr, wxT( "router_len_tuner_dist_incr_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw].emplace_back( BITMAPS::rotate_ccw, wxT( "rotate_ccw_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw].emplace_back( BITMAPS::rotate_cw, wxT( "rotate_cw_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw_x].emplace_back( BITMAPS::rotate_ccw_x, wxT( "rotate_ccw_x_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw_x].emplace_back( BITMAPS::rotate_cw_x, wxT( "rotate_cw_x_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw_y].emplace_back( BITMAPS::rotate_ccw_y, wxT( "rotate_ccw_y_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw_y].emplace_back( BITMAPS::rotate_cw_y, wxT( "rotate_cw_y_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw_z].emplace_back( BITMAPS::rotate_ccw_z, wxT( "rotate_ccw_z_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw_z].emplace_back( BITMAPS::rotate_cw_z, wxT( "rotate_cw_z_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::save_as].emplace_back( BITMAPS::save_as, wxT( "save_as_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::save].emplace_back( BITMAPS::save, wxT( "save_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::select_layer_pair].emplace_back( BITMAPS::select_layer_pair, wxT( "select_layer_pair_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::select_w_layer].emplace_back( BITMAPS::select_w_layer, wxT( "select_w_layer_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::select_same_sheet].emplace_back( BITMAPS::select_same_sheet, wxT( "select_same_sheet_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::shape_3d].emplace_back( BITMAPS::shape_3d, wxT( "shape_3d_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::shape_3d_back].emplace_back( BITMAPS::shape_3d_back, wxT( "shape_3d_back_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sheetset].emplace_back( BITMAPS::sheetset, wxT( "sheetset_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::simulator].emplace_back( BITMAPS::simulator, wxT( "simulator_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_run].emplace_back( BITMAPS::sim_run, wxT( "sim_run_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_stop].emplace_back( BITMAPS::sim_stop, wxT( "sim_stop_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_tune].emplace_back( BITMAPS::sim_tune, wxT( "sim_tune_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_probe].emplace_back( BITMAPS::sim_probe, wxT( "sim_probe_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::sim_add_signal].emplace_back( BITMAPS::sim_add_signal, wxT( "sim_add_signal_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::search_tree].emplace_back( BITMAPS::search_tree, wxT( "search_tree_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::set_origin].emplace_back( BITMAPS::set_origin, wxT( "set_origin_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_dcodenumber].emplace_back( BITMAPS::show_dcodenumber, wxT( "show_dcodenumber_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_footprint].emplace_back( BITMAPS::show_footprint, wxT( "show_footprint_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_mod_edge].emplace_back( BITMAPS::show_mod_edge, wxT( "show_mod_edge_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_ratsnest].emplace_back( BITMAPS::show_ratsnest, wxT( "show_ratsnest_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::showtrack].emplace_back( BITMAPS::showtrack, wxT( "showtrack_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_not_in_posfile].emplace_back( BITMAPS::show_not_in_posfile, wxT( "show_not_in_posfile_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_other].emplace_back( BITMAPS::show_other, wxT( "show_other_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_tht].emplace_back( BITMAPS::show_tht, wxT( "show_tht_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_smt].emplace_back( BITMAPS::show_smt, wxT( "show_smt_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_zone].emplace_back( BITMAPS::show_zone, wxT( "show_zone_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_zone_disable].emplace_back( BITMAPS::show_zone_disable, wxT( "show_zone_disable_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_zone_outline_only].emplace_back( BITMAPS::show_zone_outline_only, wxT( "show_zone_outline_only_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_zone_triangulation].emplace_back( BITMAPS::show_zone_triangulation, wxT( "show_zone_triangulation_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_all_layers].emplace_back( BITMAPS::show_all_layers, wxT( "show_all_layers_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_no_layers].emplace_back( BITMAPS::show_no_layers, wxT( "show_no_layers_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_no_copper_layers].emplace_back( BITMAPS::show_no_copper_layers, wxT( "show_no_copper_layers_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_all_copper_layers].emplace_back( BITMAPS::show_all_copper_layers, wxT( "show_all_copper_layers_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_all_front_layers].emplace_back( BITMAPS::show_all_front_layers, wxT( "show_all_front_layers_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_all_back_layers].emplace_back( BITMAPS::show_all_back_layers, wxT( "show_all_back_layers_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_front_assembly_layers].emplace_back( BITMAPS::show_front_assembly_layers, wxT( "show_front_assembly_layers_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::show_back_assembly_layers].emplace_back( BITMAPS::show_back_assembly_layers, wxT( "show_back_assembly_layers_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::special_tools].emplace_back( BITMAPS::special_tools, wxT( "special_tools_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::spreadsheet].emplace_back( BITMAPS::spreadsheet, wxT( "spreadsheet_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::swap].emplace_back( BITMAPS::swap, wxT( "swap_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::swap_layer].emplace_back( BITMAPS::swap_layer, wxT( "swap_layer_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::switch_corner_rounding_shape].emplace_back( BITMAPS::switch_corner_rounding_shape, wxT( "switch_corner_rounding_shape_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text].emplace_back( BITMAPS::text, wxT( "text_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::text_sketch].emplace_back( BITMAPS::text_sketch, wxT( "text_sketch_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::thermal_spokes].emplace_back( BITMAPS::thermal_spokes, wxT( "thermal_spokes_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::three_d].emplace_back( BITMAPS::three_d, wxT( "three_d_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::tool_ratsnest].emplace_back( BITMAPS::tool_ratsnest, wxT( "tool_ratsnest_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::tools].emplace_back( BITMAPS::tools, wxT( "tools_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::trash].emplace_back( BITMAPS::trash, wxT( "trash_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::undo].emplace_back( BITMAPS::undo, wxT( "undo_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::unit_inch].emplace_back( BITMAPS::unit_inch, wxT( "unit_inch_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::unit_mil].emplace_back( BITMAPS::unit_mil, wxT( "unit_mil_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::unit_mm].emplace_back( BITMAPS::unit_mm, wxT( "unit_mm_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::unknown].emplace_back( BITMAPS::unknown, wxT( "unknown_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::unlocked].emplace_back( BITMAPS::unlocked, wxT( "unlocked_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::unzip].emplace_back( BITMAPS::unzip, wxT( "unzip_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::up].emplace_back( BITMAPS::up, wxT( "up_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::update_pcb_from_sch].emplace_back( BITMAPS::update_pcb_from_sch, wxT( "update_pcb_from_sch_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::update_sch_from_pcb].emplace_back( BITMAPS::update_sch_from_pcb, wxT( "update_sch_from_pcb_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via].emplace_back( BITMAPS::via, wxT( "via_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via_annulus].emplace_back( BITMAPS::via_annulus, wxT( "via_annulus_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via_buried].emplace_back( BITMAPS::via_buried, wxT( "via_buried_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via_microvia].emplace_back( BITMAPS::via_microvia, wxT( "via_microvia_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via_sketch].emplace_back( BITMAPS::via_sketch, wxT( "via_sketch_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via_diameter].emplace_back( BITMAPS::via_diameter, wxT( "via_diameter_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::via_hole_diameter].emplace_back( BITMAPS::via_hole_diameter, wxT( "via_hole_diameter_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::width_conn].emplace_back( BITMAPS::width_conn, wxT( "width_conn_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::width_track_via].emplace_back( BITMAPS::width_track_via, wxT( "width_track_via_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::width_track].emplace_back( BITMAPS::width_track, wxT( "width_track_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zip].emplace_back( BITMAPS::zip, wxT( "zip_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zone_duplicate].emplace_back( BITMAPS::zone_duplicate, wxT( "zone_duplicate_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zone_fillet].emplace_back( BITMAPS::zone_fillet, wxT( "zone_fillet_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zone_unfill].emplace_back( BITMAPS::zone_unfill, wxT( "zone_unfill_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_area].emplace_back( BITMAPS::zoom_area, wxT( "zoom_area_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_auto_fit_in_page].emplace_back( BITMAPS::zoom_auto_fit_in_page, wxT( "zoom_auto_fit_in_page_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_fit_in_page].emplace_back( BITMAPS::zoom_fit_in_page, wxT( "zoom_fit_in_page_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_fit_to_objects].emplace_back( BITMAPS::zoom_fit_to_objects, wxT( "zoom_fit_to_objects_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_center_on_screen].emplace_back( BITMAPS::zoom_center_on_screen, wxT( "zoom_center_on_screen_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_in].emplace_back( BITMAPS::zoom_in, wxT( "zoom_in_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_out].emplace_back( BITMAPS::zoom_out, wxT( "zoom_out_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::zoom_selection].emplace_back( BITMAPS::zoom_selection, wxT( "zoom_selection_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::about].emplace_back( BITMAPS::about, wxT( "about_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_aligned_dimension].emplace_back( BITMAPS::add_aligned_dimension, wxT( "add_aligned_dimension_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_arc].emplace_back( BITMAPS::add_arc, wxT( "add_arc_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_board].emplace_back( BITMAPS::add_board, wxT( "add_board_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_bus2bus].emplace_back( BITMAPS::add_bus2bus, wxT( "add_bus2bus_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_bus].emplace_back( BITMAPS::add_bus, wxT( "add_bus_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_center_dimension].emplace_back( BITMAPS::add_center_dimension, wxT( "add_center_dimension_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_class_flag].emplace_back( BITMAPS::add_class_flag, wxT( "add_class_flag_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_circle].emplace_back( BITMAPS::add_circle, wxT( "add_circle_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_component].emplace_back( BITMAPS::add_component, wxT( "add_component_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_corner].emplace_back( BITMAPS::add_corner, wxT( "add_corner_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_dashed_line].emplace_back( BITMAPS::add_dashed_line, wxT( "add_dashed_line_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_document].emplace_back( BITMAPS::add_document, wxT( "add_document_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_glabel].emplace_back( BITMAPS::add_glabel, wxT( "add_glabel_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_graphical_segments].emplace_back( BITMAPS::add_graphical_segments, wxT( "add_graphical_segments_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_graphical_polygon].emplace_back( BITMAPS::add_graphical_polygon, wxT( "add_graphical_polygon_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_hierarchical_label].emplace_back( BITMAPS::add_hierarchical_label, wxT( "add_hierarchical_label_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_hierar_pin].emplace_back( BITMAPS::add_hierar_pin, wxT( "add_hierar_pin_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_hierarchical_subsheet].emplace_back( BITMAPS::add_hierarchical_subsheet, wxT( "add_hierarchical_subsheet_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_junction].emplace_back( BITMAPS::add_junction, wxT( "add_junction_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_keepout_area].emplace_back( BITMAPS::add_keepout_area, wxT( "add_keepout_area_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_label].emplace_back( BITMAPS::add_label, wxT( "add_label_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_leader].emplace_back( BITMAPS::add_leader, wxT( "add_leader_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_library].emplace_back( BITMAPS::add_library, wxT( "add_library_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_line2bus].emplace_back( BITMAPS::add_line2bus, wxT( "add_line2bus_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_line_label].emplace_back( BITMAPS::add_line_label, wxT( "add_line_label_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_line].emplace_back( BITMAPS::add_line, wxT( "add_line_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_orthogonal_dimension].emplace_back( BITMAPS::add_orthogonal_dimension, wxT( "add_orthogonal_dimension_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_pcb_target].emplace_back( BITMAPS::add_pcb_target, wxT( "add_pcb_target_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_power].emplace_back( BITMAPS::add_power, wxT( "add_power_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_radial_dimension].emplace_back( BITMAPS::add_radial_dimension, wxT( "add_radial_dimension_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_rectangle].emplace_back( BITMAPS::add_rectangle, wxT( "add_rectangle_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_symbol_to_schematic].emplace_back( BITMAPS::add_symbol_to_schematic, wxT( "add_symbol_to_schematic_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_tracks].emplace_back( BITMAPS::add_tracks, wxT( "add_tracks_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_via].emplace_back( BITMAPS::add_via, wxT( "add_via_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_zone_cutout].emplace_back( BITMAPS::add_zone_cutout, wxT( "add_zone_cutout_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::add_zone].emplace_back( BITMAPS::add_zone, wxT( "add_zone_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items].emplace_back( BITMAPS::align_items, wxT( "align_items_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items_left].emplace_back( BITMAPS::align_items_left, wxT( "align_items_left_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items_right].emplace_back( BITMAPS::align_items_right, wxT( "align_items_right_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items_top].emplace_back( BITMAPS::align_items_top, wxT( "align_items_top_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items_bottom].emplace_back( BITMAPS::align_items_bottom, wxT( "align_items_bottom_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items_center].emplace_back( BITMAPS::align_items_center, wxT( "align_items_center_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::align_items_middle].emplace_back( BITMAPS::align_items_middle, wxT( "align_items_middle_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::anchor].emplace_back( BITMAPS::anchor, wxT( "anchor_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::annotate_down_right].emplace_back( BITMAPS::annotate_down_right, wxT( "annotate_down_right_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::annotate_right_down].emplace_back( BITMAPS::annotate_right_down, wxT( "annotate_right_down_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::annotate].emplace_back( BITMAPS::annotate, wxT( "annotate_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::apply_pad_settings].emplace_back( BITMAPS::apply_pad_settings, wxT( "apply_pad_settings_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::array].emplace_back( BITMAPS::array, wxT( "array_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::auto_associate].emplace_back( BITMAPS::auto_associate, wxT( "auto_associate_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::auto_track_width].emplace_back( BITMAPS::auto_track_width, wxT( "auto_track_width_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::autoplace_fields].emplace_back( BITMAPS::autoplace_fields, wxT( "autoplace_fields_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d_back].emplace_back( BITMAPS::axis3d_back, wxT( "axis3d_back_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d_bottom].emplace_back( BITMAPS::axis3d_bottom, wxT( "axis3d_bottom_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d_front].emplace_back( BITMAPS::axis3d_front, wxT( "axis3d_front_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d_left].emplace_back( BITMAPS::axis3d_left, wxT( "axis3d_left_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d_right].emplace_back( BITMAPS::axis3d_right, wxT( "axis3d_right_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d_top].emplace_back( BITMAPS::axis3d_top, wxT( "axis3d_top_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::axis3d].emplace_back( BITMAPS::axis3d, wxT( "axis3d_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::break_line].emplace_back( BITMAPS::break_line, wxT( "break_line_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::bug].emplace_back( BITMAPS::bug, wxT( "bug_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::bus_definition_tool].emplace_back( BITMAPS::bus_definition_tool, wxT( "bus_definition_tool_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::cancel].emplace_back( BITMAPS::cancel, wxT( "cancel_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::change_entry_orient].emplace_back( BITMAPS::change_entry_orient, wxT( "change_entry_orient_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::contrast_mode].emplace_back( BITMAPS::contrast_mode, wxT( "contrast_mode_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::curved_ratsnest].emplace_back( BITMAPS::curved_ratsnest, wxT( "curved_ratsnest_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::checked_ok].emplace_back( BITMAPS::checked_ok, wxT( "checked_ok_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::color_materials].emplace_back( BITMAPS::color_materials, wxT( "color_materials_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::component_select_unit].emplace_back( BITMAPS::component_select_unit, wxT( "component_select_unit_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::config].emplace_back( BITMAPS::config, wxT( "config_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::convert].emplace_back( BITMAPS::convert, wxT( "convert_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::copy].emplace_back( BITMAPS::copy, wxT( "copy_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::copy_pad_settings].emplace_back( BITMAPS::copy_pad_settings, wxT( "copy_pad_settings_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::cursor_shape].emplace_back( BITMAPS::cursor_shape, wxT( "cursor_shape_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::cursor].emplace_back( BITMAPS::cursor, wxT( "cursor_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::custom_pad_to_primitives].emplace_back( BITMAPS::custom_pad_to_primitives, wxT( "custom_pad_to_primitives_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::cut].emplace_back( BITMAPS::cut, wxT( "cut_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::datasheet].emplace_back( BITMAPS::datasheet, wxT( "datasheet_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::delete_association].emplace_back( BITMAPS::delete_association, wxT( "delete_association_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::delete_cursor].emplace_back( BITMAPS::delete_cursor, wxT( "delete_cursor_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::delete_gerber].emplace_back( BITMAPS::delete_gerber, wxT( "delete_gerber_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::delete_sheet].emplace_back( BITMAPS::delete_sheet, wxT( "delete_sheet_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::directory].emplace_back( BITMAPS::directory, wxT( "directory_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::directory_browser].emplace_back( BITMAPS::directory_browser, wxT( "directory_browser_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::directory_open].emplace_back( BITMAPS::directory_open, wxT( "directory_open_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::distribute_horizontal].emplace_back( BITMAPS::distribute_horizontal, wxT( "distribute_horizontal_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::distribute_vertical].emplace_back( BITMAPS::distribute_vertical, wxT( "distribute_vertical_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::down].emplace_back( BITMAPS::down, wxT( "down_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::drag].emplace_back( BITMAPS::drag, wxT( "drag_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::drag_segment_withslope].emplace_back( BITMAPS::drag_segment_withslope, wxT( "drag_segment_withslope_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::drc].emplace_back( BITMAPS::drc, wxT( "drc_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::duplicate].emplace_back( BITMAPS::duplicate, wxT( "duplicate_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::edit_comp_footprint].emplace_back( BITMAPS::edit_comp_footprint, wxT( "edit_comp_footprint_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::edit_comp_ref].emplace_back( BITMAPS::edit_comp_ref, wxT( "edit_comp_ref_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::edit_comp_value].emplace_back( BITMAPS::edit_comp_value, wxT( "edit_comp_value_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::editor].emplace_back( BITMAPS::editor, wxT( "editor_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::edit_cmp_symb_links].emplace_back( BITMAPS::edit_cmp_symb_links, wxT( "edit_cmp_symb_links_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::edit].emplace_back( BITMAPS::edit, wxT( "edit_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::edge_to_copper_clearance].emplace_back( BITMAPS::edge_to_copper_clearance, wxT( "edge_to_copper_clearance_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::enter_sheet].emplace_back( BITMAPS::enter_sheet, wxT( "enter_sheet_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ercerr].emplace_back( BITMAPS::ercerr, wxT( "ercerr_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::erc_green].emplace_back( BITMAPS::erc_green, wxT( "erc_green_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ercwarn].emplace_back( BITMAPS::ercwarn, wxT( "ercwarn_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::erc].emplace_back( BITMAPS::erc, wxT( "erc_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::exit].emplace_back( BITMAPS::exit, wxT( "exit_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::exchange].emplace_back( BITMAPS::exchange, wxT( "exchange_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export3d].emplace_back( BITMAPS::export3d, wxT( "export3d_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_cmp].emplace_back( BITMAPS::export_cmp, wxT( "export_cmp_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_dsn].emplace_back( BITMAPS::export_dsn, wxT( "export_dsn_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_idf].emplace_back( BITMAPS::export_idf, wxT( "export_idf_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_file].emplace_back( BITMAPS::export_file, wxT( "export_file_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_footprint_names].emplace_back( BITMAPS::export_footprint_names, wxT( "export_footprint_names_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_module].emplace_back( BITMAPS::export_module, wxT( "export_module_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_part].emplace_back( BITMAPS::export_part, wxT( "export_part_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_png].emplace_back( BITMAPS::export_png, wxT( "export_png_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_step].emplace_back( BITMAPS::export_step, wxT( "export_step_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_svg].emplace_back( BITMAPS::export_svg, wxT( "export_svg_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::export_to_pcbnew].emplace_back( BITMAPS::export_to_pcbnew, wxT( "export_to_pcbnew_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::fabrication].emplace_back( BITMAPS::fabrication, wxT( "fabrication_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_bom].emplace_back( BITMAPS::file_bom, wxT( "file_bom_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_drl].emplace_back( BITMAPS::file_drl, wxT( "file_drl_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_dsn].emplace_back( BITMAPS::file_dsn, wxT( "file_dsn_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_gbr].emplace_back( BITMAPS::file_gbr, wxT( "file_gbr_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_gerber_job].emplace_back( BITMAPS::file_gerber_job, wxT( "file_gerber_job_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_html].emplace_back( BITMAPS::file_html, wxT( "file_html_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_idf].emplace_back( BITMAPS::file_idf, wxT( "file_idf_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_pdf].emplace_back( BITMAPS::file_pdf, wxT( "file_pdf_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_pos].emplace_back( BITMAPS::file_pos, wxT( "file_pos_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::file_svg].emplace_back( BITMAPS::file_svg, wxT( "file_svg_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::fill_zone].emplace_back( BITMAPS::fill_zone, wxT( "fill_zone_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::filter].emplace_back( BITMAPS::filter, wxT( "filter_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::find].emplace_back( BITMAPS::find, wxT( "find_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::find_replace].emplace_back( BITMAPS::find_replace, wxT( "find_replace_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::flag].emplace_back( BITMAPS::flag, wxT( "flag_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::flip_board].emplace_back( BITMAPS::flip_board, wxT( "flip_board_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::gbr_select_mode1].emplace_back( BITMAPS::gbr_select_mode1, wxT( "gbr_select_mode1_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::gbr_select_mode2].emplace_back( BITMAPS::gbr_select_mode2, wxT( "gbr_select_mode2_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::gerbview_show_negative_objects].emplace_back( BITMAPS::gerbview_show_negative_objects, wxT( "gerbview_show_negative_objects_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::general_deletions].emplace_back( BITMAPS::general_deletions, wxT( "general_deletions_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::general_ratsnest].emplace_back( BITMAPS::general_ratsnest, wxT( "general_ratsnest_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::grid_select].emplace_back( BITMAPS::grid_select, wxT( "grid_select_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::grid_select_axis].emplace_back( BITMAPS::grid_select_axis, wxT( "grid_select_axis_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::grid].emplace_back( BITMAPS::grid, wxT( "grid_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::group].emplace_back( BITMAPS::group, wxT( "group_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::group_enter].emplace_back( BITMAPS::group_enter, wxT( "group_enter_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::group_leave].emplace_back( BITMAPS::group_leave, wxT( "group_leave_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::group_remove].emplace_back( BITMAPS::group_remove, wxT( "group_remove_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::group_ungroup].emplace_back( BITMAPS::group_ungroup, wxT( "group_ungroup_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::help].emplace_back( BITMAPS::help, wxT( "help_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::help_online].emplace_back( BITMAPS::help_online, wxT( "help_online_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hidden_pin].emplace_back( BITMAPS::hidden_pin, wxT( "hidden_pin_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hide_ratsnest].emplace_back( BITMAPS::hide_ratsnest, wxT( "hide_ratsnest_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hierarchy_nav].emplace_back( BITMAPS::hierarchy_nav, wxT( "hierarchy_nav_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hotkeys].emplace_back( BITMAPS::hotkeys, wxT( "hotkeys_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hole_to_hole_clearance].emplace_back( BITMAPS::hole_to_hole_clearance, wxT( "hole_to_hole_clearance_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hole_to_copper_clearance].emplace_back( BITMAPS::hole_to_copper_clearance, wxT( "hole_to_copper_clearance_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::hv45mode].emplace_back( BITMAPS::hv45mode, wxT( "hv45mode_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_cvpcb_24].emplace_back( BITMAPS::icon_cvpcb_24, wxT( "icon_cvpcb_24_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_footprint_browser].emplace_back( BITMAPS::icon_footprint_browser, wxT( "icon_footprint_browser_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_gerbview_24].emplace_back( BITMAPS::icon_gerbview_24, wxT( "icon_gerbview_24_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcm_24].emplace_back( BITMAPS::icon_pcm_24, wxT( "icon_pcm_24_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import3d].emplace_back( BITMAPS::import3d, wxT( "import3d_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::image].emplace_back( BITMAPS::image, wxT( "image_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_brd_file].emplace_back( BITMAPS::import_brd_file, wxT( "import_brd_file_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_document].emplace_back( BITMAPS::import_document, wxT( "import_document_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_footprint_names].emplace_back( BITMAPS::import_footprint_names, wxT( "import_footprint_names_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_hierarchical_label].emplace_back( BITMAPS::import_hierarchical_label, wxT( "import_hierarchical_label_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_module].emplace_back( BITMAPS::import_module, wxT( "import_module_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_part].emplace_back( BITMAPS::import_part, wxT( "import_part_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_project].emplace_back( BITMAPS::import_project, wxT( "import_project_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import_vector].emplace_back( BITMAPS::import_vector, wxT( "import_vector_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::import].emplace_back( BITMAPS::import, wxT( "import_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::info].emplace_back( BITMAPS::info, wxT( "info_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::insert_module_board].emplace_back( BITMAPS::insert_module_board, wxT( "insert_module_board_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::language].emplace_back( BITMAPS::language, wxT( "language_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::layers_manager].emplace_back( BITMAPS::layers_manager, wxT( "layers_manager_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::leave_sheet].emplace_back( BITMAPS::leave_sheet, wxT( "leave_sheet_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::left].emplace_back( BITMAPS::left, wxT( "left_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::libedit].emplace_back( BITMAPS::libedit, wxT( "libedit_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::lib_next].emplace_back( BITMAPS::lib_next, wxT( "lib_next_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::lib_previous].emplace_back( BITMAPS::lib_previous, wxT( "lib_previous_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::library_browser].emplace_back( BITMAPS::library_browser, wxT( "library_browser_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::library_archive].emplace_back( BITMAPS::library_archive, wxT( "library_archive_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::library_archive_as].emplace_back( BITMAPS::library_archive_as, wxT( "library_archive_as_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::library].emplace_back( BITMAPS::library, wxT( "library_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::library_table].emplace_back( BITMAPS::library_table, wxT( "library_table_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::lines_any].emplace_back( BITMAPS::lines_any, wxT( "lines_any_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::lines90].emplace_back( BITMAPS::lines90, wxT( "lines90_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::list_nets].emplace_back( BITMAPS::list_nets, wxT( "list_nets_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::load_drill].emplace_back( BITMAPS::load_drill, wxT( "load_drill_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::load_gerber].emplace_back( BITMAPS::load_gerber, wxT( "load_gerber_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::load_module_board].emplace_back( BITMAPS::load_module_board, wxT( "load_module_board_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::lock_unlock].emplace_back( BITMAPS::lock_unlock, wxT( "lock_unlock_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::locked].emplace_back( BITMAPS::locked, wxT( "locked_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::marker_exclude].emplace_back( BITMAPS::marker_exclude, wxT( "marker_exclude_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::marker_next].emplace_back( BITMAPS::marker_next, wxT( "marker_next_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::marker_previous].emplace_back( BITMAPS::marker_previous, wxT( "marker_previous_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::measurement].emplace_back( BITMAPS::measurement, wxT( "measurement_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pcb_target].emplace_back( BITMAPS::pcb_target, wxT( "pcb_target_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mirror_h].emplace_back( BITMAPS::mirror_h, wxT( "mirror_h_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mirror_v].emplace_back( BITMAPS::mirror_v, wxT( "mirror_v_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mode_module].emplace_back( BITMAPS::mode_module, wxT( "mode_module_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module_editor].emplace_back( BITMAPS::module_editor, wxT( "module_editor_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module_wizard].emplace_back( BITMAPS::module_wizard, wxT( "module_wizard_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module_filtered_list].emplace_back( BITMAPS::module_filtered_list, wxT( "module_filtered_list_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module_options].emplace_back( BITMAPS::module_options, wxT( "module_options_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module_pin_filtered_list].emplace_back( BITMAPS::module_pin_filtered_list, wxT( "module_pin_filtered_list_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module_library_list].emplace_back( BITMAPS::module_library_list, wxT( "module_library_list_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::module].emplace_back( BITMAPS::module, wxT( "module_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::morgan1].emplace_back( BITMAPS::morgan1, wxT( "morgan1_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::morgan2].emplace_back( BITMAPS::morgan2, wxT( "morgan2_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::move_exactly].emplace_back( BITMAPS::move_exactly, wxT( "move_exactly_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::move].emplace_back( BITMAPS::move, wxT( "move_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::move_relative].emplace_back( BITMAPS::move_relative, wxT( "move_relative_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mw_add_gap].emplace_back( BITMAPS::mw_add_gap, wxT( "mw_add_gap_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mw_add_line].emplace_back( BITMAPS::mw_add_line, wxT( "mw_add_line_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mw_add_shape].emplace_back( BITMAPS::mw_add_shape, wxT( "mw_add_shape_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mw_add_stub_arc].emplace_back( BITMAPS::mw_add_stub_arc, wxT( "mw_add_stub_arc_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::mw_add_stub].emplace_back( BITMAPS::mw_add_stub, wxT( "mw_add_stub_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::net_highlight].emplace_back( BITMAPS::net_highlight, wxT( "net_highlight_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::net_highlight_schematic].emplace_back( BITMAPS::net_highlight_schematic, wxT( "net_highlight_schematic_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::netlist].emplace_back( BITMAPS::netlist, wxT( "netlist_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::new_component].emplace_back( BITMAPS::new_component, wxT( "new_component_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::new_footprint].emplace_back( BITMAPS::new_footprint, wxT( "new_footprint_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::new_generic].emplace_back( BITMAPS::new_generic, wxT( "new_generic_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::new_library].emplace_back( BITMAPS::new_library, wxT( "new_library_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::new_project].emplace_back( BITMAPS::new_project, wxT( "new_project_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::new_project_from_template].emplace_back( BITMAPS::new_project_from_template, wxT( "new_project_from_template_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::noconn].emplace_back( BITMAPS::noconn, wxT( "noconn_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::normal].emplace_back( BITMAPS::normal, wxT( "normal_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::open_project].emplace_back( BITMAPS::open_project, wxT( "open_project_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::open_project_demo].emplace_back( BITMAPS::open_project_demo, wxT( "open_project_demo_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::options_3drender].emplace_back( BITMAPS::options_3drender, wxT( "options_3drender_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::options_board].emplace_back( BITMAPS::options_board, wxT( "options_board_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::options_generic].emplace_back( BITMAPS::options_generic, wxT( "options_generic_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::options_pad].emplace_back( BITMAPS::options_pad, wxT( "options_pad_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::options_schematic].emplace_back( BITMAPS::options_schematic, wxT( "options_schematic_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::opt_show_polygon].emplace_back( BITMAPS::opt_show_polygon, wxT( "opt_show_polygon_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ortho].emplace_back( BITMAPS::ortho, wxT( "ortho_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pack_footprints].emplace_back( BITMAPS::pack_footprints, wxT( "pack_footprints_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pad_sketch].emplace_back( BITMAPS::pad_sketch, wxT( "pad_sketch_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pad].emplace_back( BITMAPS::pad, wxT( "pad_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pad_enumerate].emplace_back( BITMAPS::pad_enumerate, wxT( "pad_enumerate_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pad_number].emplace_back( BITMAPS::pad_number, wxT( "pad_number_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pads_mask_layers].emplace_back( BITMAPS::pads_mask_layers, wxT( "pads_mask_layers_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pads_remove].emplace_back( BITMAPS::pads_remove, wxT( "pads_remove_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::path].emplace_back( BITMAPS::path, wxT( "path_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pagelayout_normal_view_mode].emplace_back( BITMAPS::pagelayout_normal_view_mode, wxT( "pagelayout_normal_view_mode_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pagelayout_special_view_mode].emplace_back( BITMAPS::pagelayout_special_view_mode, wxT( "pagelayout_special_view_mode_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::part_properties].emplace_back( BITMAPS::part_properties, wxT( "part_properties_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::paste].emplace_back( BITMAPS::paste, wxT( "paste_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::paste_special].emplace_back( BITMAPS::paste_special, wxT( "paste_special_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pin2pin].emplace_back( BITMAPS::pin2pin, wxT( "pin2pin_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pin_size_to].emplace_back( BITMAPS::pin_size_to, wxT( "pin_size_to_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pin_show_etype].emplace_back( BITMAPS::pin_show_etype, wxT( "pin_show_etype_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pin_table].emplace_back( BITMAPS::pin_table, wxT( "pin_table_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pin].emplace_back( BITMAPS::pin, wxT( "pin_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::plot].emplace_back( BITMAPS::plot, wxT( "plot_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::polar_coord].emplace_back( BITMAPS::polar_coord, wxT( "polar_coord_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_bom].emplace_back( BITMAPS::post_bom, wxT( "post_bom_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_compo].emplace_back( BITMAPS::post_compo, wxT( "post_compo_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_d356].emplace_back( BITMAPS::post_d356, wxT( "post_d356_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_drill].emplace_back( BITMAPS::post_drill, wxT( "post_drill_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_gencad].emplace_back( BITMAPS::post_gencad, wxT( "post_gencad_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_gerber].emplace_back( BITMAPS::post_gerber, wxT( "post_gerber_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::post_rpt].emplace_back( BITMAPS::post_rpt, wxT( "post_rpt_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::preference].emplace_back( BITMAPS::preference, wxT( "preference_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::print_button].emplace_back( BITMAPS::print_button, wxT( "print_button_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::project].emplace_back( BITMAPS::project, wxT( "project_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::project_close].emplace_back( BITMAPS::project_close, wxT( "project_close_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::project_kicad].emplace_back( BITMAPS::project_kicad, wxT( "project_kicad_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair].emplace_back( BITMAPS::ps_diff_pair, wxT( "ps_diff_pair_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair_gap].emplace_back( BITMAPS::ps_diff_pair_gap, wxT( "ps_diff_pair_gap_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair_tune_length].emplace_back( BITMAPS::ps_diff_pair_tune_length, wxT( "ps_diff_pair_tune_length_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ps_diff_pair_tune_phase].emplace_back( BITMAPS::ps_diff_pair_tune_phase, wxT( "ps_diff_pair_tune_phase_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::ps_tune_length].emplace_back( BITMAPS::ps_tune_length, wxT( "ps_tune_length_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::push_pad_settings].emplace_back( BITMAPS::push_pad_settings, wxT( "push_pad_settings_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::puzzle_piece].emplace_back( BITMAPS::puzzle_piece, wxT( "puzzle_piece_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::py_script].emplace_back( BITMAPS::py_script, wxT( "py_script_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::recent].emplace_back( BITMAPS::recent, wxT( "recent_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::redo].emplace_back( BITMAPS::redo, wxT( "redo_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::refresh].emplace_back( BITMAPS::refresh, wxT( "refresh_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::reload].emplace_back( BITMAPS::reload, wxT( "reload_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::render_mode].emplace_back( BITMAPS::render_mode, wxT( "render_mode_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rescue].emplace_back( BITMAPS::rescue, wxT( "rescue_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::right].emplace_back( BITMAPS::right, wxT( "right_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner].emplace_back( BITMAPS::router_len_tuner, wxT( "router_len_tuner_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_setup].emplace_back( BITMAPS::router_len_tuner_setup, wxT( "router_len_tuner_setup_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_amplitude_decr].emplace_back( BITMAPS::router_len_tuner_amplitude_decr, wxT( "router_len_tuner_amplitude_decr_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_amplitude_incr].emplace_back( BITMAPS::router_len_tuner_amplitude_incr, wxT( "router_len_tuner_amplitude_incr_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_dist_decr].emplace_back( BITMAPS::router_len_tuner_dist_decr, wxT( "router_len_tuner_dist_decr_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::router_len_tuner_dist_incr].emplace_back( BITMAPS::router_len_tuner_dist_incr, wxT( "router_len_tuner_dist_incr_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw].emplace_back( BITMAPS::rotate_ccw, wxT( "rotate_ccw_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw].emplace_back( BITMAPS::rotate_cw, wxT( "rotate_cw_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw_x].emplace_back( BITMAPS::rotate_ccw_x, wxT( "rotate_ccw_x_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw_x].emplace_back( BITMAPS::rotate_cw_x, wxT( "rotate_cw_x_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw_y].emplace_back( BITMAPS::rotate_ccw_y, wxT( "rotate_ccw_y_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw_y].emplace_back( BITMAPS::rotate_cw_y, wxT( "rotate_cw_y_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_ccw_z].emplace_back( BITMAPS::rotate_ccw_z, wxT( "rotate_ccw_z_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rotate_cw_z].emplace_back( BITMAPS::rotate_cw_z, wxT( "rotate_cw_z_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::save_as].emplace_back( BITMAPS::save_as, wxT( "save_as_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::save].emplace_back( BITMAPS::save, wxT( "save_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::select_layer_pair].emplace_back( BITMAPS::select_layer_pair, wxT( "select_layer_pair_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::select_w_layer].emplace_back( BITMAPS::select_w_layer, wxT( "select_w_layer_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::select_same_sheet].emplace_back( BITMAPS::select_same_sheet, wxT( "select_same_sheet_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::shape_3d].emplace_back( BITMAPS::shape_3d, wxT( "shape_3d_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::shape_3d_back].emplace_back( BITMAPS::shape_3d_back, wxT( "shape_3d_back_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sheetset].emplace_back( BITMAPS::sheetset, wxT( "sheetset_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::simulator].emplace_back( BITMAPS::simulator, wxT( "simulator_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_run].emplace_back( BITMAPS::sim_run, wxT( "sim_run_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_stop].emplace_back( BITMAPS::sim_stop, wxT( "sim_stop_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_tune].emplace_back( BITMAPS::sim_tune, wxT( "sim_tune_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_probe].emplace_back( BITMAPS::sim_probe, wxT( "sim_probe_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::sim_add_signal].emplace_back( BITMAPS::sim_add_signal, wxT( "sim_add_signal_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::search_tree].emplace_back( BITMAPS::search_tree, wxT( "search_tree_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::set_origin].emplace_back( BITMAPS::set_origin, wxT( "set_origin_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_dcodenumber].emplace_back( BITMAPS::show_dcodenumber, wxT( "show_dcodenumber_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_footprint].emplace_back( BITMAPS::show_footprint, wxT( "show_footprint_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_mod_edge].emplace_back( BITMAPS::show_mod_edge, wxT( "show_mod_edge_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_ratsnest].emplace_back( BITMAPS::show_ratsnest, wxT( "show_ratsnest_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::showtrack].emplace_back( BITMAPS::showtrack, wxT( "showtrack_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_not_in_posfile].emplace_back( BITMAPS::show_not_in_posfile, wxT( "show_not_in_posfile_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_other].emplace_back( BITMAPS::show_other, wxT( "show_other_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_tht].emplace_back( BITMAPS::show_tht, wxT( "show_tht_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_smt].emplace_back( BITMAPS::show_smt, wxT( "show_smt_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_zone].emplace_back( BITMAPS::show_zone, wxT( "show_zone_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_zone_disable].emplace_back( BITMAPS::show_zone_disable, wxT( "show_zone_disable_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_zone_outline_only].emplace_back( BITMAPS::show_zone_outline_only, wxT( "show_zone_outline_only_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_zone_triangulation].emplace_back( BITMAPS::show_zone_triangulation, wxT( "show_zone_triangulation_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_all_layers].emplace_back( BITMAPS::show_all_layers, wxT( "show_all_layers_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_no_layers].emplace_back( BITMAPS::show_no_layers, wxT( "show_no_layers_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_no_copper_layers].emplace_back( BITMAPS::show_no_copper_layers, wxT( "show_no_copper_layers_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_all_copper_layers].emplace_back( BITMAPS::show_all_copper_layers, wxT( "show_all_copper_layers_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_all_front_layers].emplace_back( BITMAPS::show_all_front_layers, wxT( "show_all_front_layers_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_all_back_layers].emplace_back( BITMAPS::show_all_back_layers, wxT( "show_all_back_layers_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_front_assembly_layers].emplace_back( BITMAPS::show_front_assembly_layers, wxT( "show_front_assembly_layers_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::show_back_assembly_layers].emplace_back( BITMAPS::show_back_assembly_layers, wxT( "show_back_assembly_layers_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::special_tools].emplace_back( BITMAPS::special_tools, wxT( "special_tools_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::spreadsheet].emplace_back( BITMAPS::spreadsheet, wxT( "spreadsheet_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::swap].emplace_back( BITMAPS::swap, wxT( "swap_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::swap_layer].emplace_back( BITMAPS::swap_layer, wxT( "swap_layer_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::switch_corner_rounding_shape].emplace_back( BITMAPS::switch_corner_rounding_shape, wxT( "switch_corner_rounding_shape_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text].emplace_back( BITMAPS::text, wxT( "text_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::text_sketch].emplace_back( BITMAPS::text_sketch, wxT( "text_sketch_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::thermal_spokes].emplace_back( BITMAPS::thermal_spokes, wxT( "thermal_spokes_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::three_d].emplace_back( BITMAPS::three_d, wxT( "three_d_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::tool_ratsnest].emplace_back( BITMAPS::tool_ratsnest, wxT( "tool_ratsnest_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::tools].emplace_back( BITMAPS::tools, wxT( "tools_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::trash].emplace_back( BITMAPS::trash, wxT( "trash_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::undo].emplace_back( BITMAPS::undo, wxT( "undo_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::unit_inch].emplace_back( BITMAPS::unit_inch, wxT( "unit_inch_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::unit_mil].emplace_back( BITMAPS::unit_mil, wxT( "unit_mil_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::unit_mm].emplace_back( BITMAPS::unit_mm, wxT( "unit_mm_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::unknown].emplace_back( BITMAPS::unknown, wxT( "unknown_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::unlocked].emplace_back( BITMAPS::unlocked, wxT( "unlocked_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::unzip].emplace_back( BITMAPS::unzip, wxT( "unzip_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::up].emplace_back( BITMAPS::up, wxT( "up_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::update_pcb_from_sch].emplace_back( BITMAPS::update_pcb_from_sch, wxT( "update_pcb_from_sch_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::update_sch_from_pcb].emplace_back( BITMAPS::update_sch_from_pcb, wxT( "update_sch_from_pcb_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via].emplace_back( BITMAPS::via, wxT( "via_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via_annulus].emplace_back( BITMAPS::via_annulus, wxT( "via_annulus_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via_buried].emplace_back( BITMAPS::via_buried, wxT( "via_buried_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via_microvia].emplace_back( BITMAPS::via_microvia, wxT( "via_microvia_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via_sketch].emplace_back( BITMAPS::via_sketch, wxT( "via_sketch_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via_diameter].emplace_back( BITMAPS::via_diameter, wxT( "via_diameter_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::via_hole_diameter].emplace_back( BITMAPS::via_hole_diameter, wxT( "via_hole_diameter_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::width_conn].emplace_back( BITMAPS::width_conn, wxT( "width_conn_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::width_track_via].emplace_back( BITMAPS::width_track_via, wxT( "width_track_via_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::width_track].emplace_back( BITMAPS::width_track, wxT( "width_track_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zip].emplace_back( BITMAPS::zip, wxT( "zip_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zone_duplicate].emplace_back( BITMAPS::zone_duplicate, wxT( "zone_duplicate_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zone_fillet].emplace_back( BITMAPS::zone_fillet, wxT( "zone_fillet_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zone_unfill].emplace_back( BITMAPS::zone_unfill, wxT( "zone_unfill_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_area].emplace_back( BITMAPS::zoom_area, wxT( "zoom_area_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_auto_fit_in_page].emplace_back( BITMAPS::zoom_auto_fit_in_page, wxT( "zoom_auto_fit_in_page_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_fit_in_page].emplace_back( BITMAPS::zoom_fit_in_page, wxT( "zoom_fit_in_page_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_fit_to_objects].emplace_back( BITMAPS::zoom_fit_to_objects, wxT( "zoom_fit_to_objects_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_center_on_screen].emplace_back( BITMAPS::zoom_center_on_screen, wxT( "zoom_center_on_screen_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_in].emplace_back( BITMAPS::zoom_in, wxT( "zoom_in_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_out].emplace_back( BITMAPS::zoom_out, wxT( "zoom_out_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::zoom_selection].emplace_back( BITMAPS::zoom_selection, wxT( "zoom_selection_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_bitmap2component_32].emplace_back( BITMAPS::icon_bitmap2component_32, wxT( "icon_bitmap2component_32_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_eeschema_32].emplace_back( BITMAPS::icon_eeschema_32, wxT( "icon_eeschema_32_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_gerbview_32].emplace_back( BITMAPS::icon_gerbview_32, wxT( "icon_gerbview_32_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_32].emplace_back( BITMAPS::icon_kicad_32, wxT( "icon_kicad_32_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_nightly_32].emplace_back( BITMAPS::icon_kicad_nightly_32, wxT( "icon_kicad_nightly_32_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_libedit_32].emplace_back( BITMAPS::icon_libedit_32, wxT( "icon_libedit_32_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_modedit_32].emplace_back( BITMAPS::icon_modedit_32, wxT( "icon_modedit_32_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor_32].emplace_back( BITMAPS::icon_pagelayout_editor_32, wxT( "icon_pagelayout_editor_32_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbcalculator_32].emplace_back( BITMAPS::icon_pcbcalculator_32, wxT( "icon_pcbcalculator_32_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbnew_32].emplace_back( BITMAPS::icon_pcbnew_32, wxT( "icon_pcbnew_32_32.png" ), 32, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_bitmap2component_32].emplace_back( BITMAPS::icon_bitmap2component_32, wxT( "icon_bitmap2component_32_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_eeschema_32].emplace_back( BITMAPS::icon_eeschema_32, wxT( "icon_eeschema_32_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_gerbview_32].emplace_back( BITMAPS::icon_gerbview_32, wxT( "icon_gerbview_32_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_32].emplace_back( BITMAPS::icon_kicad_32, wxT( "icon_kicad_32_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_nightly_32].emplace_back( BITMAPS::icon_kicad_nightly_32, wxT( "icon_kicad_nightly_32_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_libedit_32].emplace_back( BITMAPS::icon_libedit_32, wxT( "icon_libedit_32_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_modedit_32].emplace_back( BITMAPS::icon_modedit_32, wxT( "icon_modedit_32_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor_32].emplace_back( BITMAPS::icon_pagelayout_editor_32, wxT( "icon_pagelayout_editor_32_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbcalculator_32].emplace_back( BITMAPS::icon_pcbcalculator_32, wxT( "icon_pcbcalculator_32_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbnew_32].emplace_back( BITMAPS::icon_pcbnew_32, wxT( "icon_pcbnew_32_dark_32.png" ), 32, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_bitmap2component_24].emplace_back( BITMAPS::icon_bitmap2component_24, wxT( "icon_bitmap2component_24_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_eeschema_24].emplace_back( BITMAPS::icon_eeschema_24, wxT( "icon_eeschema_24_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_gerbview_24].emplace_back( BITMAPS::icon_gerbview_24, wxT( "icon_gerbview_24_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_libedit_24].emplace_back( BITMAPS::icon_libedit_24, wxT( "icon_libedit_24_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_modedit_24].emplace_back( BITMAPS::icon_modedit_24, wxT( "icon_modedit_24_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor_24].emplace_back( BITMAPS::icon_pagelayout_editor_24, wxT( "icon_pagelayout_editor_24_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbcalculator_24].emplace_back( BITMAPS::icon_pcbcalculator_24, wxT( "icon_pcbcalculator_24_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbnew_24].emplace_back( BITMAPS::icon_pcbnew_24, wxT( "icon_pcbnew_24_24.png" ), 24, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_bitmap2component_24].emplace_back( BITMAPS::icon_bitmap2component_24, wxT( "icon_bitmap2component_24_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_eeschema_24].emplace_back( BITMAPS::icon_eeschema_24, wxT( "icon_eeschema_24_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_gerbview_24].emplace_back( BITMAPS::icon_gerbview_24, wxT( "icon_gerbview_24_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_libedit_24].emplace_back( BITMAPS::icon_libedit_24, wxT( "icon_libedit_24_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_modedit_24].emplace_back( BITMAPS::icon_modedit_24, wxT( "icon_modedit_24_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor_24].emplace_back( BITMAPS::icon_pagelayout_editor_24, wxT( "icon_pagelayout_editor_24_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbcalculator_24].emplace_back( BITMAPS::icon_pcbcalculator_24, wxT( "icon_pcbcalculator_24_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbnew_24].emplace_back( BITMAPS::icon_pcbnew_24, wxT( "icon_pcbnew_24_dark_24.png" ), 24, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_cvpcb].emplace_back( BITMAPS::icon_cvpcb, wxT( "icon_cvpcb_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_eeschema].emplace_back( BITMAPS::icon_eeschema, wxT( "icon_eeschema_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_gerbview].emplace_back( BITMAPS::icon_gerbview, wxT( "icon_gerbview_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad].emplace_back( BITMAPS::icon_kicad, wxT( "icon_kicad_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_nightly].emplace_back( BITMAPS::icon_kicad_nightly, wxT( "icon_kicad_nightly_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_libedit].emplace_back( BITMAPS::icon_libedit, wxT( "icon_libedit_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_modedit].emplace_back( BITMAPS::icon_modedit, wxT( "icon_modedit_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbnew].emplace_back( BITMAPS::icon_pcbnew, wxT( "icon_pcbnew_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor].emplace_back( BITMAPS::icon_pagelayout_editor, wxT( "icon_pagelayout_editor_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_bitmap2component].emplace_back( BITMAPS::icon_bitmap2component, wxT( "icon_bitmap2component_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbcalculator].emplace_back( BITMAPS::icon_pcbcalculator, wxT( "icon_pcbcalculator_64.png" ), 64, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_cvpcb].emplace_back( BITMAPS::icon_cvpcb, wxT( "icon_cvpcb_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_eeschema].emplace_back( BITMAPS::icon_eeschema, wxT( "icon_eeschema_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_gerbview].emplace_back( BITMAPS::icon_gerbview, wxT( "icon_gerbview_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad].emplace_back( BITMAPS::icon_kicad, wxT( "icon_kicad_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_nightly].emplace_back( BITMAPS::icon_kicad_nightly, wxT( "icon_kicad_nightly_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_libedit].emplace_back( BITMAPS::icon_libedit, wxT( "icon_libedit_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_modedit].emplace_back( BITMAPS::icon_modedit, wxT( "icon_modedit_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbnew].emplace_back( BITMAPS::icon_pcbnew, wxT( "icon_pcbnew_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor].emplace_back( BITMAPS::icon_pagelayout_editor, wxT( "icon_pagelayout_editor_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_bitmap2component].emplace_back( BITMAPS::icon_bitmap2component, wxT( "icon_bitmap2component_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbcalculator].emplace_back( BITMAPS::icon_pcbcalculator, wxT( "icon_pcbcalculator_dark_64.png" ), 64, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_cvpcb].emplace_back( BITMAPS::icon_cvpcb, wxT( "icon_cvpcb_128.png" ), 128, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_eeschema].emplace_back( BITMAPS::icon_eeschema, wxT( "icon_eeschema_128.png" ), 128, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_gerbview].emplace_back( BITMAPS::icon_gerbview, wxT( "icon_gerbview_128.png" ), 128, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad].emplace_back( BITMAPS::icon_kicad, wxT( "icon_kicad_128.png" ), 128, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_nightly].emplace_back( BITMAPS::icon_kicad_nightly, wxT( "icon_kicad_nightly_128.png" ), 128, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_libedit].emplace_back( BITMAPS::icon_libedit, wxT( "icon_libedit_128.png" ), 128, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_modedit].emplace_back( BITMAPS::icon_modedit, wxT( "icon_modedit_128.png" ), 128, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbnew].emplace_back( BITMAPS::icon_pcbnew, wxT( "icon_pcbnew_128.png" ), 128, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor].emplace_back( BITMAPS::icon_pagelayout_editor, wxT( "icon_pagelayout_editor_128.png" ), 128, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_bitmap2component].emplace_back( BITMAPS::icon_bitmap2component, wxT( "icon_bitmap2component_128.png" ), 128, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbcalculator].emplace_back( BITMAPS::icon_pcbcalculator, wxT( "icon_pcbcalculator_128.png" ), 128, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_cvpcb].emplace_back( BITMAPS::icon_cvpcb, wxT( "icon_cvpcb_dark_128.png" ), 128, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_eeschema].emplace_back( BITMAPS::icon_eeschema, wxT( "icon_eeschema_dark_128.png" ), 128, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_gerbview].emplace_back( BITMAPS::icon_gerbview, wxT( "icon_gerbview_dark_128.png" ), 128, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad].emplace_back( BITMAPS::icon_kicad, wxT( "icon_kicad_dark_128.png" ), 128, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_nightly].emplace_back( BITMAPS::icon_kicad_nightly, wxT( "icon_kicad_nightly_dark_128.png" ), 128, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_libedit].emplace_back( BITMAPS::icon_libedit, wxT( "icon_libedit_dark_128.png" ), 128, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_modedit].emplace_back( BITMAPS::icon_modedit, wxT( "icon_modedit_dark_128.png" ), 128, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbnew].emplace_back( BITMAPS::icon_pcbnew, wxT( "icon_pcbnew_dark_128.png" ), 128, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor].emplace_back( BITMAPS::icon_pagelayout_editor, wxT( "icon_pagelayout_editor_dark_128.png" ), 128, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_bitmap2component].emplace_back( BITMAPS::icon_bitmap2component, wxT( "icon_bitmap2component_dark_128.png" ), 128, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbcalculator].emplace_back( BITMAPS::icon_pcbcalculator, wxT( "icon_pcbcalculator_dark_128.png" ), 128, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::dialog_warning].emplace_back( BITMAPS::dialog_warning, wxT( "dialog_warning_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_3d].emplace_back( BITMAPS::icon_3d, wxT( "icon_3d_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_cvpcb].emplace_back( BITMAPS::icon_cvpcb, wxT( "icon_cvpcb_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_eeschema].emplace_back( BITMAPS::icon_eeschema, wxT( "icon_eeschema_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_gerbview].emplace_back( BITMAPS::icon_gerbview, wxT( "icon_gerbview_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad].emplace_back( BITMAPS::icon_kicad, wxT( "icon_kicad_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_nightly].emplace_back( BITMAPS::icon_kicad_nightly, wxT( "icon_kicad_nightly_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_libedit].emplace_back( BITMAPS::icon_libedit, wxT( "icon_libedit_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_modedit].emplace_back( BITMAPS::icon_modedit, wxT( "icon_modedit_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbnew].emplace_back( BITMAPS::icon_pcbnew, wxT( "icon_pcbnew_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_bitmap2component].emplace_back( BITMAPS::icon_bitmap2component, wxT( "icon_bitmap2component_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor].emplace_back( BITMAPS::icon_pagelayout_editor, wxT( "icon_pagelayout_editor_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbcalculator].emplace_back( BITMAPS::icon_pcbcalculator, wxT( "icon_pcbcalculator_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pcm].emplace_back( BITMAPS::icon_pcm, wxT( "icon_pcm_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::reannotate_down_left].emplace_back( BITMAPS::reannotate_down_left, wxT( "reannotate_down_left_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::reannotate_down_right].emplace_back( BITMAPS::reannotate_down_right, wxT( "reannotate_down_right_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::reannotate_left_down].emplace_back( BITMAPS::reannotate_left_down, wxT( "reannotate_left_down_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::reannotate_left_up].emplace_back( BITMAPS::reannotate_left_up, wxT( "reannotate_left_up_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::reannotate_right_down].emplace_back( BITMAPS::reannotate_right_down, wxT( "reannotate_right_down_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::reannotate_right_up].emplace_back( BITMAPS::reannotate_right_up, wxT( "reannotate_right_up_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::reannotate_up_left].emplace_back( BITMAPS::reannotate_up_left, wxT( "reannotate_up_left_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::reannotate_up_right].emplace_back( BITMAPS::reannotate_up_right, wxT( "reannotate_up_right_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor].emplace_back( BITMAPS::icon_pagelayout_editor, wxT( "icon_pagelayout_editor_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::wizard_add_fplib_icon].emplace_back( BITMAPS::wizard_add_fplib_icon, wxT( "wizard_add_fplib_icon_48.png" ), 48, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::dialog_warning].emplace_back( BITMAPS::dialog_warning, wxT( "dialog_warning_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_3d].emplace_back( BITMAPS::icon_3d, wxT( "icon_3d_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_cvpcb].emplace_back( BITMAPS::icon_cvpcb, wxT( "icon_cvpcb_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_eeschema].emplace_back( BITMAPS::icon_eeschema, wxT( "icon_eeschema_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_gerbview].emplace_back( BITMAPS::icon_gerbview, wxT( "icon_gerbview_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad].emplace_back( BITMAPS::icon_kicad, wxT( "icon_kicad_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_kicad_nightly].emplace_back( BITMAPS::icon_kicad_nightly, wxT( "icon_kicad_nightly_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_libedit].emplace_back( BITMAPS::icon_libedit, wxT( "icon_libedit_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_modedit].emplace_back( BITMAPS::icon_modedit, wxT( "icon_modedit_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbnew].emplace_back( BITMAPS::icon_pcbnew, wxT( "icon_pcbnew_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_bitmap2component].emplace_back( BITMAPS::icon_bitmap2component, wxT( "icon_bitmap2component_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor].emplace_back( BITMAPS::icon_pagelayout_editor, wxT( "icon_pagelayout_editor_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcbcalculator].emplace_back( BITMAPS::icon_pcbcalculator, wxT( "icon_pcbcalculator_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pcm].emplace_back( BITMAPS::icon_pcm, wxT( "icon_pcm_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::reannotate_down_left].emplace_back( BITMAPS::reannotate_down_left, wxT( "reannotate_down_left_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::reannotate_down_right].emplace_back( BITMAPS::reannotate_down_right, wxT( "reannotate_down_right_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::reannotate_left_down].emplace_back( BITMAPS::reannotate_left_down, wxT( "reannotate_left_down_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::reannotate_left_up].emplace_back( BITMAPS::reannotate_left_up, wxT( "reannotate_left_up_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::reannotate_right_down].emplace_back( BITMAPS::reannotate_right_down, wxT( "reannotate_right_down_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::reannotate_right_up].emplace_back( BITMAPS::reannotate_right_up, wxT( "reannotate_right_up_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::reannotate_up_left].emplace_back( BITMAPS::reannotate_up_left, wxT( "reannotate_up_left_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::reannotate_up_right].emplace_back( BITMAPS::reannotate_up_right, wxT( "reannotate_up_right_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::icon_pagelayout_editor].emplace_back( BITMAPS::icon_pagelayout_editor, wxT( "icon_pagelayout_editor_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::wizard_add_fplib_icon].emplace_back( BITMAPS::wizard_add_fplib_icon, wxT( "wizard_add_fplib_icon_dark_48.png" ), 48, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::att_bridge].emplace_back( BITMAPS::att_bridge, wxT( "att_bridge.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::att_pi].emplace_back( BITMAPS::att_pi, wxT( "att_pi.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::att_splitter].emplace_back( BITMAPS::att_splitter, wxT( "att_splitter.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::att_tee].emplace_back( BITMAPS::att_tee, wxT( "att_tee.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::c_microstrip].emplace_back( BITMAPS::c_microstrip, wxT( "c_microstrip.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::coax].emplace_back( BITMAPS::coax, wxT( "coax.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::color_code_multiplier].emplace_back( BITMAPS::color_code_multiplier, wxT( "color_code_multiplier.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::color_code_tolerance].emplace_back( BITMAPS::color_code_tolerance, wxT( "color_code_tolerance.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::color_code_value].emplace_back( BITMAPS::color_code_value, wxT( "color_code_value.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::color_code_value_and_name].emplace_back( BITMAPS::color_code_value_and_name, wxT( "color_code_value_and_name.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::cpw].emplace_back( BITMAPS::cpw, wxT( "cpw.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::cpw_back].emplace_back( BITMAPS::cpw_back, wxT( "cpw_back.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::microstrip].emplace_back( BITMAPS::microstrip, wxT( "microstrip.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::microstrip_zodd_zeven].emplace_back( BITMAPS::microstrip_zodd_zeven, wxT( "microstrip_zodd_zeven.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pads_npth].emplace_back( BITMAPS::pads_npth, wxT( "pads_npth.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pads_npth_bottom].emplace_back( BITMAPS::pads_npth_bottom, wxT( "pads_npth_bottom.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pads_npth_top].emplace_back( BITMAPS::pads_npth_top, wxT( "pads_npth_top.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pads_npth_top_bottom].emplace_back( BITMAPS::pads_npth_top_bottom, wxT( "pads_npth_top_bottom.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pads_remove_unused].emplace_back( BITMAPS::pads_remove_unused, wxT( "pads_remove_unused.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pads_remove_unused_keep_bottom].emplace_back( BITMAPS::pads_remove_unused_keep_bottom, wxT( "pads_remove_unused_keep_bottom.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::pads_reset_unused].emplace_back( BITMAPS::pads_reset_unused, wxT( "pads_reset_unused.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::rectwaveguide].emplace_back( BITMAPS::rectwaveguide, wxT( "rectwaveguide.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::regul].emplace_back( BITMAPS::regul, wxT( "regul.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::regul_3pins].emplace_back( BITMAPS::regul_3pins, wxT( "regul_3pins.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::stripline].emplace_back( BITMAPS::stripline, wxT( "stripline.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::stroke_dash].emplace_back( BITMAPS::stroke_dash, wxT( "stroke_dash.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::stroke_dashdot].emplace_back( BITMAPS::stroke_dashdot, wxT( "stroke_dashdot.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::stroke_dashdotdot].emplace_back( BITMAPS::stroke_dashdotdot, wxT( "stroke_dashdotdot.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::stroke_dot].emplace_back( BITMAPS::stroke_dot, wxT( "stroke_dot.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::stroke_solid].emplace_back( BITMAPS::stroke_solid, wxT( "stroke_solid.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::teardrop_sizes].emplace_back( BITMAPS::teardrop_sizes, wxT( "teardrop_sizes.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::teardrop_rect_sizes].emplace_back( BITMAPS::teardrop_rect_sizes, wxT( "teardrop_rect_sizes.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::teardrop_track_sizes].emplace_back( BITMAPS::teardrop_track_sizes, wxT( "teardrop_track_sizes.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::tune_diff_pair_length_legend].emplace_back( BITMAPS::tune_diff_pair_length_legend, wxT( "tune_diff_pair_length_legend.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::tune_diff_pair_skew_legend].emplace_back( BITMAPS::tune_diff_pair_skew_legend, wxT( "tune_diff_pair_skew_legend.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::tune_single_track_length_legend].emplace_back( BITMAPS::tune_single_track_length_legend, wxT( "tune_single_track_length_legend.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::twistedpair].emplace_back( BITMAPS::twistedpair, wxT( "twistedpair.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::viacalc].emplace_back( BITMAPS::viacalc, wxT( "viacalc.png" ), -1, wxT( "light" ) );
    aBitmapInfoCache[BITMAPS::att_bridge].emplace_back( BITMAPS::att_bridge, wxT( "att_bridge_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::att_pi].emplace_back( BITMAPS::att_pi, wxT( "att_pi_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::att_splitter].emplace_back( BITMAPS::att_splitter, wxT( "att_splitter_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::att_tee].emplace_back( BITMAPS::att_tee, wxT( "att_tee_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::c_microstrip].emplace_back( BITMAPS::c_microstrip, wxT( "c_microstrip_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::coax].emplace_back( BITMAPS::coax, wxT( "coax_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::color_code_multiplier].emplace_back( BITMAPS::color_code_multiplier, wxT( "color_code_multiplier_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::color_code_tolerance].emplace_back( BITMAPS::color_code_tolerance, wxT( "color_code_tolerance_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::color_code_value].emplace_back( BITMAPS::color_code_value, wxT( "color_code_value_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::color_code_value_and_name].emplace_back( BITMAPS::color_code_value_and_name, wxT( "color_code_value_and_name_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::cpw].emplace_back( BITMAPS::cpw, wxT( "cpw_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::cpw_back].emplace_back( BITMAPS::cpw_back, wxT( "cpw_back_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::microstrip].emplace_back( BITMAPS::microstrip, wxT( "microstrip_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::microstrip_zodd_zeven].emplace_back( BITMAPS::microstrip_zodd_zeven, wxT( "microstrip_zodd_zeven_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pads_npth].emplace_back( BITMAPS::pads_npth, wxT( "pads_npth_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pads_npth_bottom].emplace_back( BITMAPS::pads_npth_bottom, wxT( "pads_npth_bottom_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pads_npth_top].emplace_back( BITMAPS::pads_npth_top, wxT( "pads_npth_top_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pads_npth_top_bottom].emplace_back( BITMAPS::pads_npth_top_bottom, wxT( "pads_npth_top_bottom_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pads_remove_unused].emplace_back( BITMAPS::pads_remove_unused, wxT( "pads_remove_unused_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pads_remove_unused_keep_bottom].emplace_back( BITMAPS::pads_remove_unused_keep_bottom, wxT( "pads_remove_unused_keep_bottom_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::pads_reset_unused].emplace_back( BITMAPS::pads_reset_unused, wxT( "pads_reset_unused_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::rectwaveguide].emplace_back( BITMAPS::rectwaveguide, wxT( "rectwaveguide_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::regul].emplace_back( BITMAPS::regul, wxT( "regul_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::regul_3pins].emplace_back( BITMAPS::regul_3pins, wxT( "regul_3pins_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::stripline].emplace_back( BITMAPS::stripline, wxT( "stripline_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::stroke_dash].emplace_back( BITMAPS::stroke_dash, wxT( "stroke_dash_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::stroke_dashdot].emplace_back( BITMAPS::stroke_dashdot, wxT( "stroke_dashdot_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::stroke_dashdotdot].emplace_back( BITMAPS::stroke_dashdotdot, wxT( "stroke_dashdotdot_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::stroke_dot].emplace_back( BITMAPS::stroke_dot, wxT( "stroke_dot_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::stroke_solid].emplace_back( BITMAPS::stroke_solid, wxT( "stroke_solid_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::teardrop_sizes].emplace_back( BITMAPS::teardrop_sizes, wxT( "teardrop_sizes_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::teardrop_rect_sizes].emplace_back( BITMAPS::teardrop_rect_sizes, wxT( "teardrop_rect_sizes_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::teardrop_track_sizes].emplace_back( BITMAPS::teardrop_track_sizes, wxT( "teardrop_track_sizes_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::tune_diff_pair_length_legend].emplace_back( BITMAPS::tune_diff_pair_length_legend, wxT( "tune_diff_pair_length_legend_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::tune_diff_pair_skew_legend].emplace_back( BITMAPS::tune_diff_pair_skew_legend, wxT( "tune_diff_pair_skew_legend_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::tune_single_track_length_legend].emplace_back( BITMAPS::tune_single_track_length_legend, wxT( "tune_single_track_length_legend_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::twistedpair].emplace_back( BITMAPS::twistedpair, wxT( "twistedpair_dark.png" ), -1, wxT( "dark" ) );
    aBitmapInfoCache[BITMAPS::viacalc].emplace_back( BITMAPS::viacalc, wxT( "viacalc_dark.png" ), -1, wxT( "dark" ) );

};
